/**
 * generated by Xtext 2.22.0
 */
package org.bumble.eastadl.simplified.tests;

import com.google.inject.Inject;
import java.nio.file.Files;
import java.nio.file.Paths;
import org.eclipse.eatop.eastadl22.EAXML;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.testing.InjectWith;
import org.eclipse.xtext.testing.extensions.InjectionExtension;
import org.eclipse.xtext.testing.util.ParseHelper;
import org.eclipse.xtext.testing.validation.ValidationTestHelper;
import org.eclipse.xtext.xbase.lib.Exceptions;
import org.eclipse.xtext.xbase.lib.IterableExtensions;
import org.junit.Assert;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;

@ExtendWith(InjectionExtension.class)
@InjectWith(EastAdlSimplifiedInjectorProvider.class)
@SuppressWarnings("all")
public class EastAdlSimplifiedParsingTest {
  @Inject
  private ParseHelper<EAXML> parseHelper;
  
  @Inject
  private ValidationTestHelper validationTestHelper;
  
  public String mydsl = null;
  
  /**
   * Check if the model described in testsource/texts_001.txt file could be loaded
   * For the concrete contents, please take a look at the testsource/texts_001.txt file
   */
  @Test
  public void loadModel() {
    try {
      String _projectAbsolutePath = FileOperateHelper.getProjectAbsolutePath();
      String _plus = (_projectAbsolutePath + "texts_001.txt");
      byte[] _readAllBytes = Files.readAllBytes(Paths.get(_plus));
      String _string = new String(_readAllBytes);
      this.mydsl = _string;
      final EAXML result = this.parseHelper.parse(this.mydsl);
      Assertions.assertNotNull(result);
      final EList<Resource.Diagnostic> errors = result.eResource().getErrors();
      boolean _isEmpty = errors.isEmpty();
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("Unexpected errors: ");
      String _join = IterableExtensions.join(errors, ", ");
      _builder.append(_join);
      Assertions.assertTrue(_isEmpty, _builder.toString());
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  /**
   * Check if the model described in example file could be parsed without issues
   */
  @Test
  public void testValidModel() {
    try {
      String _rootDirectoryAbsolutePath = FileOperateHelper.getRootDirectoryAbsolutePath();
      String _plus = (_rootDirectoryAbsolutePath + "simple.eatxt");
      byte[] _readAllBytes = Files.readAllBytes(Paths.get(_plus));
      String _string = new String(_readAllBytes);
      this.mydsl = _string;
      final EAXML eaxml = this.parseHelper.parse(this.mydsl);
      this.validationTestHelper.assertNoIssues(eaxml);
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  /**
   * Check if the model desribed in example file contains at least one EAPackage
   */
  @Test
  public void checkEAPackageNumberInProgram() {
    try {
      String _rootDirectoryAbsolutePath = FileOperateHelper.getRootDirectoryAbsolutePath();
      String _plus = (_rootDirectoryAbsolutePath + "simple.eatxt");
      byte[] _readAllBytes = Files.readAllBytes(Paths.get(_plus));
      String _string = new String(_readAllBytes);
      this.mydsl = _string;
      final EAXML eaxml = this.parseHelper.parse(this.mydsl);
      int _size = eaxml.getTopLevelPackage().size();
      boolean _greaterThan = (_size > 0);
      Assert.assertTrue("The program should have at least one EAPackage", _greaterThan);
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
}
