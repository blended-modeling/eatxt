/*
 * generated by Xtext 2.22.0
 */
package org.bumble.eatxt.tests

import com.google.inject.Inject
import java.nio.file.Files
import java.nio.file.Paths
import org.eclipse.eatop.eastadl22.EAXML
import org.eclipse.xtext.testing.InjectWith
import org.eclipse.xtext.testing.extensions.InjectionExtension
import org.eclipse.xtext.testing.util.ParseHelper
import org.eclipse.xtext.testing.validation.ValidationTestHelper
import org.junit.jupiter.api.Assertions
import org.junit.jupiter.api.Test
import org.junit.jupiter.api.^extension.ExtendWith
import static org.junit.Assert.*

import org.bumble.eatxt.tests.FileOperateHelper

@ExtendWith(InjectionExtension)
@InjectWith(EatxtInjectorProvider)
class EatxtParsingTest {
	@Inject
	ParseHelper<EAXML> parseHelper
	
	@Inject ValidationTestHelper validationTestHelper
	
	public String mydsl = null
	
	/**
	 * Check if the model described in testsource/texts_001.txt file could be loaded
	 * For the concrete contents, please take a look at the testsource/texts_001.txt file
	 * */
	@Test
	def void loadModel() {
		mydsl = FileOperateHelper.getFileContentAsString("texts_001.txt");
		Assertions.assertFalse(mydsl.isEmpty());
		val result = parseHelper.parse(mydsl)
		Assertions.assertNotNull(result)
		val errors = result.eResource.errors
		Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
	}
	
	/**
	 * Check if the model described in example file could be parsed without issues
	 * */
	@Test
 	def testValidModel() {
		mydsl = FileOperateHelper.getFileContentAsString("simple.eatxt");
		Assertions.assertFalse(mydsl.isEmpty());
     	val eaxml = parseHelper.parse(mydsl)
     	validationTestHelper.assertNoIssues(eaxml)
 	}
 	
 	/**
 	 * Check if the model desribed in example file contains at least one EAPackage
 	 * */
 	@Test
	def checkEAPackageNumberInProgram() {
		mydsl = FileOperateHelper.getFileContentAsString("simple.eatxt");
		Assertions.assertFalse(mydsl.isEmpty());
	    val eaxml = parseHelper.parse(mydsl)
		assertTrue("The program should have at least one EAPackage", 
			eaxml.topLevelPackage.size() > 0
		)
	}
}
