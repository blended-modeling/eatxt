// automatically generated by Xtext
grammar org.bumble.eastadl.simplified.EastAdlSimplified with org.eclipse.xtext.common.Terminals

import "http://east-adl.info/2.1.12" 
import "http://www.eclipse.org/emf/2002/Ecore" as ecore


Comment returns Comment:
	Comment_Impl | Rationale;


TraceableSpecification returns TraceableSpecification:
	FunctionClientServerInterface | ArrayDatatype | CompositeDatatype | EABoolean | EANumerical | EAString | Enumeration | RangeableValueType;

Relationship returns Relationship:
	Realization;
	
FunctionPort returns FunctionPort:
	FunctionClientServerPort | FunctionFlowPort | FunctionPowerPort;

DesignFunctionType returns DesignFunctionType:
	DesignFunctionType_Impl | BasicSoftwareFunctionType | HardwareFunctionType | LocalDeviceManager;

EADatatype returns EADatatype:
	ArrayDatatype | CompositeDatatype | EABoolean | EANumerical | EAString | Enumeration | RangeableValueType;

EAValue returns EAValue:
	EAArrayValue | EABooleanValue | EACompositeValue | EAEnumerationValue | EAExpression | EANumericalValue | EAStringValue;


HardwareComponentType returns HardwareComponentType:
	HardwareComponentType_Impl | Actuator | ElectricalComponent | Node | Sensor;


HardwarePin returns HardwarePin:
	CommunicationHardwarePin | IOHardwarePin | PowerHardwarePin
	
	;
//PortConnector returns PortConnector:
//	HardwarePortConnector | LogicalPortConnector;

//EAPackageableElement returns EAPackageableElement:
//	Allocation | BasicSoftwareFunctionType | DesignFunctionType_Impl | FunctionClientServerInterface | HardwareFunctionType | LocalDeviceManager | Actuator | 
//	ElectricalComponent | HardwareComponentType_Impl | Node | Sensor | ArrayDatatype | CompositeDatatype | EABoolean | EANumerical | EAString | Enumeration | 
//	Quantity | RangeableValueType | Unit;

AllocateableElement returns AllocateableElement:
	DesignFunctionPrototype | FunctionClientServerPort | FunctionConnector | FunctionFlowPort | FunctionPowerPort;

AllocationTarget returns AllocationTarget:
//	CommunicationHardwarePin | HardwareComponentPrototype | HardwarePort | HardwarePortConnector | IOHardwarePin | LogicalPortConnector | PowerHardwarePin;
	CommunicationHardwarePin | HardwareComponentPrototype | HardwarePort | HardwarePortConnector | IOHardwarePin | PowerHardwarePin;
FunctionPrototype returns FunctionPrototype:
	DesignFunctionPrototype;

EAElement returns EAElement:
	Allocation | BasicSoftwareFunctionType | DesignFunctionPrototype | DesignFunctionType_Impl | FunctionAllocation | FunctionClientServerInterface | 
	FunctionClientServerPort | FunctionConnector | FunctionFlowPort | FunctionPowerPort | HardwareFunctionType | LocalDeviceManager | Operation | 
	PortGroup | Actuator | CommunicationHardwarePin | ElectricalComponent | HardwareComponentPrototype | HardwareComponentType_Impl | HardwareConnector | 
//	HardwarePort | HardwarePortConnector | IOHardwarePin | LogicalPortConnector | Node | PowerHardwarePin | Sensor | EAPackage | Realization | 
	HardwarePort | HardwarePortConnector | IOHardwarePin | Node | PowerHardwarePin | Sensor | EAPackage | Realization | 
	ArrayDatatype | CompositeDatatype | EABoolean | EADatatypePrototype | EANumerical | EAString | Enumeration | EnumerationLiteral | Quantity | 
	RangeableValueType | Unit;

Identifier returns Identifier:
	'Identifier' /* TODO: implement this rule and an appropriate IValueConverter */;

String0 returns String:
	'String' /* TODO: implement this rule and an appropriate IValueConverter */;

Allocation returns Allocation:
	'Allocation'
		'shortName' shortName=Identifier
		('category' category=Identifier)?
		('uuid' uuid=String0)?
		('name' name=String0)?
		('ownedComment' ownedComment+=Comment ( "," ownedComment+=Comment)* )?
		('functionAllocation' functionAllocation+=FunctionAllocation ( "," functionAllocation+=FunctionAllocation)* )?
	;

BasicSoftwareFunctionType returns BasicSoftwareFunctionType:
	'BasicSoftwareFunctionType'
		'shortName' shortName=Identifier
		('category' category=Identifier)?
		('uuid' uuid=String0)?
		('name' name=String0)?
		('isElementary' isElementary=Boolean)?
		('traceableSpecification' traceableSpecification+=[TraceableSpecification|EString] ( "," traceableSpecification+=[TraceableSpecification|EString])* )?
		('ownedComment' ownedComment+=Comment ( "," ownedComment+=Comment)* )?
		('ownedRelationship' ownedRelationship+=Relationship ( "," ownedRelationship+=Relationship)* )?
		('portGroup' portGroup+=PortGroup ( "," portGroup+=PortGroup)* )?
		('connector' connector+=FunctionConnector ( "," connector+=FunctionConnector)* )?
		('port' port+=FunctionPort ( "," port+=FunctionPort)* )?
		('part' part+=DesignFunctionPrototype ( "," part+=DesignFunctionPrototype)* )?
	;

DesignFunctionPrototype returns DesignFunctionPrototype:
	'DesignFunctionPrototype'
		'shortName' shortName=Identifier
		('category' category=Identifier)?
		('uuid' uuid=String0)?
		('name' name=String0)?
		'type' type=[DesignFunctionType|EString]
		('ownedComment' ownedComment+=Comment ( "," ownedComment+=Comment)* )?
	;

DesignFunctionType_Impl returns DesignFunctionType:
	'DesignFunctionType'
		'shortName' shortName=Identifier
		('category' category=Identifier)?
		('uuid' uuid=String0)?
		('name' name=String0)?
		('isElementary' isElementary=Boolean)?
		('traceableSpecification' traceableSpecification+=[TraceableSpecification|EString] ( "," traceableSpecification+=[TraceableSpecification|EString])* )?
		('ownedComment' ownedComment+=Comment ( "," ownedComment+=Comment)* )?
		('ownedRelationship' ownedRelationship+=Relationship ( "," ownedRelationship+=Relationship)* )?
		('portGroup' portGroup+=PortGroup ( "," portGroup+=PortGroup)* )?
		('connector' connector+=FunctionConnector ( "," connector+=FunctionConnector)* )?
		('port' port+=FunctionPort ( "," port+=FunctionPort)* )?
		('part' part+=DesignFunctionPrototype ( "," part+=DesignFunctionPrototype)* )?
	;

FunctionAllocation returns FunctionAllocation:
	'FunctionAllocation'
		'shortName' shortName=Identifier
		('category' category=Identifier)?
		('uuid' uuid=String0)?
		('name' name=String0)?
		('ownedComment'  ownedComment+=Comment ( "," ownedComment+=Comment)* )?
		'allocatedElement' allocatedElement=FunctionAllocation_allocatedElement
		'target' target=FunctionAllocation_target
	;

FunctionClientServerInterface returns FunctionClientServerInterface:
	'FunctionClientServerInterface'
		'shortName' shortName=Identifier
		('category' category=Identifier)?
		('uuid' uuid=String0)?
		('name' name=String0)?
		('text' text=String0)?
//		('uri' uri=String0)?
		('ownedComment' ownedComment+=Comment ( "," ownedComment+=Comment)* )?
		('operation' operation+=Operation ( "," operation+=Operation)* )?
	;

FunctionClientServerPort returns FunctionClientServerPort:
	'FunctionClientServerPort'
		'shortName' shortName=Identifier
		('category' category=Identifier)?
		('uuid' uuid=String0)?
		('name' name=String0)?
		'kind' kind=ClientServerKind
		'type' type=[FunctionClientServerInterface|EString]
		('ownedComment' ownedComment+=Comment ( "," ownedComment+=Comment)* )?
	;

FunctionConnector returns FunctionConnector:
	'FunctionConnector'
		'shortName' shortName=Identifier
		('category' category=Identifier)?
		('uuid' uuid=String0)?
		('name' name=String0)?
		('ownedComment' ownedComment+=Comment ( "," ownedComment+=Comment)* )?
		'port' port+=FunctionConnector_port ( "," port+=FunctionConnector_port)* 
	;

FunctionFlowPort returns FunctionFlowPort:
	'FunctionFlowPort'
		'shortName' shortName=Identifier
		('category' category=Identifier)?
		('uuid' uuid=String0)?
		('name' name=String0)?
		'direction' direction=EADirectionKind
		'type' type=[EADatatype|EString]
		('ownedComment' ownedComment+=Comment ( "," ownedComment+=Comment)* )?
		('defaultValue' defaultValue=EAValue)?
		;

FunctionPowerPort returns FunctionPowerPort:
	'FunctionPowerPort'
		'shortName' shortName=Identifier
		('category' category=Identifier)?
		('uuid' uuid=String0)?
		('name' name=String0)?
		'type' type=[CompositeDatatype|EString]
		('ownedComment' ownedComment+=Comment ( "," ownedComment+=Comment)* )?
	;

HardwareFunctionType returns HardwareFunctionType:
	'HardwareFunctionType'
		'shortName' shortName=Identifier
		('category' category=Identifier)?
		('uuid' uuid=String0)?
		('name' name=String0)?
		('isElementary' isElementary=Boolean)?
		('traceableSpecification' traceableSpecification+=[TraceableSpecification|EString] ( "," traceableSpecification+=[TraceableSpecification|EString])* )?
		('hardwareComponent' hardwareComponent=[HardwareComponentType|EString])?
		('ownedComment' ownedComment+=Comment ( "," ownedComment+=Comment)* )?
		('ownedRelationship' ownedRelationship+=Relationship ( "," ownedRelationship+=Relationship)* )?
		('portGroup' portGroup+=PortGroup ( "," portGroup+=PortGroup)* )?
		('connector' connector+=FunctionConnector ( "," connector+=FunctionConnector)* )?
		('port' port+=FunctionPort ( "," port+=FunctionPort)* )?
		('part' part+=DesignFunctionPrototype ( "," part+=DesignFunctionPrototype)* )?
	;

LocalDeviceManager returns LocalDeviceManager:
	'LocalDeviceManager'
		'shortName' shortName=Identifier
		('category' category=Identifier)?
		('uuid' uuid=String0)?
		('name' name=String0)?
		('isElementary' isElementary=Boolean)?
		('traceableSpecification' traceableSpecification+=[TraceableSpecification|EString] ( "," traceableSpecification+=[TraceableSpecification|EString])* )?
		('ownedComment' ownedComment+=Comment ( "," ownedComment+=Comment)* )?
		('ownedRelationship' ownedRelationship+=Relationship ( "," ownedRelationship+=Relationship)* )?
		('portGroup' portGroup+=PortGroup ( "," portGroup+=PortGroup)* )?
		('connector' connector+=FunctionConnector ( "," connector+=FunctionConnector)* )?
		('port' port+=FunctionPort ( "," port+=FunctionPort)* )?
		('part' part+=DesignFunctionPrototype ( "," part+=DesignFunctionPrototype)* )?
	;

Operation returns Operation:
	'Operation'
		'shortName' shortName=Identifier
		('category' category=Identifier)?
		('uuid' uuid=String0)?
		('name' name=String0)?
		('ownedComment' ownedComment+=Comment ( "," ownedComment+=Comment)* )?
		('return' return=EADatatypePrototype)?
		('argument' argument+=EADatatypePrototype ( "," argument+=EADatatypePrototype)* )?
	;

PortGroup returns PortGroup:
	'PortGroup'
		'shortName' shortName=Identifier
		('category' category=Identifier)?
		('uuid' uuid=String0)?
		('name' name=String0)?
		('port' port+=[FunctionPort|EString] ( "," port+=[FunctionPort|EString])* )?
		('ownedComment' ownedComment+=Comment ( "," ownedComment+=Comment)* )?
		('portGroup' portGroup+=PortGroup ( "," portGroup+=PortGroup)* )?
	;

Actuator returns Actuator:
	'Actuator'
		'shortName' shortName=Identifier
		('category' category=Identifier)?
		('uuid' uuid=String0)?
		('name' name=String0)?
		('traceableSpecification' traceableSpecification+=[TraceableSpecification|EString] ( "," traceableSpecification+=[TraceableSpecification|EString])* )?
		('ownedComment' ownedComment+=Comment ( "," ownedComment+=Comment)* )?
		('ownedRelationship' ownedRelationship+=Relationship ( "," ownedRelationship+=Relationship)* )?
		('pin' pin+=HardwarePin ( "," pin+=HardwarePin)* )?
		('part' part+=HardwareComponentPrototype ( "," part+=HardwareComponentPrototype)* )?
		('connector' connector+=HardwareConnector ( "," connector+=HardwareConnector)* )?
		('port' port+=HardwarePort ( "," port+=HardwarePort)* )?
//		('portConnector' '{' portConnector+=PortConnector ( "," portConnector+=PortConnector)* '}' )?
	;

CommunicationHardwarePin returns CommunicationHardwarePin:
	'CommunicationHardwarePin'
		'shortName' shortName=Identifier
		('category' category=Identifier)?
		('uuid' uuid=String0)?
		('name' name=String0)?
		('direction' direction=EADirectionKind)?
		('isGround' isGround=Boolean)?
		('ownedComment' ownedComment+=Comment ( "," ownedComment+=Comment)* )?
	;

ElectricalComponent returns ElectricalComponent:
	'ElectricalComponent'
		'shortName' shortName=Identifier
		('category' category=Identifier)?
		('uuid' uuid=String0)?
		('name' name=String0)?
		('isActive' isActive=Boolean)?
		('traceableSpecification' traceableSpecification+=[TraceableSpecification|EString] ( "," traceableSpecification+=[TraceableSpecification|EString])* )?
		('ownedComment' ownedComment+=Comment ( "," ownedComment+=Comment)* )?
		('ownedRelationship' ownedRelationship+=Relationship ( "," ownedRelationship+=Relationship)* )?
		('pin' pin+=HardwarePin ( "," pin+=HardwarePin)* )?
		('part' part+=HardwareComponentPrototype ( "," part+=HardwareComponentPrototype)* '}' )?
		('connector' connector+=HardwareConnector ( "," connector+=HardwareConnector)* )?
		('port' port+=HardwarePort ( "," port+=HardwarePort)* )?
//		('portConnector' '{' portConnector+=PortConnector ( "," portConnector+=PortConnector)* '}' )?
	;

HardwareComponentPrototype returns HardwareComponentPrototype:
	'HardwareComponentPrototype'
		'shortName' shortName=Identifier
		('category' category=Identifier)?
		('uuid' uuid=String0)?
		('name' name=String0)?
		'type' type=[HardwareComponentType|EString]
		('ownedComment' ownedComment+=Comment ( "," ownedComment+=Comment)* )?
	;

HardwareComponentType_Impl returns HardwareComponentType:
	'HardwareComponentType'
		'shortName' shortName=Identifier
		('category' category=Identifier)?
		('uuid' uuid=String0)?
		('name' name=String0)?
		('traceableSpecification' traceableSpecification+=[TraceableSpecification|EString] ( "," traceableSpecification+=[TraceableSpecification|EString])* )?
		('ownedComment' ownedComment+=Comment ( "," ownedComment+=Comment)* )?
		('ownedRelationship' ownedRelationship+=Relationship ( "," ownedRelationship+=Relationship)* )?
		('pin' pin+=HardwarePin ( "," pin+=HardwarePin)* )?
		('part' part+=HardwareComponentPrototype ( "," part+=HardwareComponentPrototype)* )?
		('connector' connector+=HardwareConnector ( "," connector+=HardwareConnector)* )?
		('port' port+=HardwarePort ( "," port+=HardwarePort)* )?
//		('portConnector' '{' portConnector+=PortConnector ( "," portConnector+=PortConnector)* '}' )?
	;

HardwareConnector returns HardwareConnector:
	'HardwareConnector'
		'shortName' shortName=Identifier
		('category' category=Identifier)?
		('uuid' uuid=String0)?
		('name' name=String0)?
		('ownedComment' ownedComment+=Comment ( "," ownedComment+=Comment)* )?
		'port' port+=HardwareConnector_port ( "," port+=HardwareConnector_port)* 
	;

HardwarePort returns HardwarePort:
	'HardwarePort'
		'shortName' shortName=Identifier
		('category' category=Identifier)?
		('uuid' uuid=String0)?
		('name' name=String0)?
		('isShield' isShield=Boolean)?
		('referencedPin' referencedPin+=[HardwarePin|EString] ( "," referencedPin+=[HardwarePin|EString])* )?
		('ownedComment' ownedComment+=Comment ( "," ownedComment+=Comment)* )?
		('containedPin' containedPin+=HardwarePin ( "," containedPin+=HardwarePin)* )?
		('containedPort' containedPort+=HardwarePort ( "," containedPort+=HardwarePort)* )?
	;

HardwarePortConnector returns HardwarePortConnector:
	'HardwarePortConnector'
		'shortName' shortName=Identifier
		('category' category=Identifier)?
		('uuid' uuid=String0)?
		('name' name=String0)?
		('ownedComment' ownedComment+=Comment ( "," ownedComment+=Comment)* )?
		'port' port+=HardwarePortConnector_port ( "," port+=HardwarePortConnector_port)* 
		('connector' connector+=HardwareConnector ( "," connector+=HardwareConnector)* )?
	;

IOHardwarePin returns IOHardwarePin:
	'IOHardwarePin'
		'shortName' shortName=Identifier
		('category' category=Identifier)?
		('uuid' uuid=String0)?
		('name' name=String0)?
		('direction' direction=EADirectionKind)?
		('isGround' isGround=Boolean)?
		('kind' kind=IOHardwarePinKind)?
		('ownedComment' ownedComment+=Comment ( "," ownedComment+=Comment)* )?
	;

//LogicalPortConnector returns LogicalPortConnector:
//	'LogicalPortConnector'
//	'{'
//		'shortName' shortName=Identifier
//		('category' category=Identifier)?
//		('uuid' uuid=String0)?
//		('name' name=String0)?
//		('kind' kind=HardwareBusKind)?
//		('busSpeed' busSpeed=Float)?
//		('ownedComment' '{' ownedComment+=Comment ( "," ownedComment+=Comment)* '}' )?
//		'port' '{' port+=HardwarePortConnector_port ( "," port+=HardwarePortConnector_port)* '}' 
//	'}';

Node returns Node:
	'Node'
		'shortName' shortName=Identifier
		('category' category=Identifier)?
		('uuid' uuid=String0)?
		('name' name=String0)?
		('executionRate' executionRate=Float)?
		('traceableSpecification' traceableSpecification+=[TraceableSpecification|EString] ( "," traceableSpecification+=[TraceableSpecification|EString])* )?
		('ownedComment' ownedComment+=Comment ( "," ownedComment+=Comment)* )?
		('ownedRelationship' ownedRelationship+=Relationship ( "," ownedRelationship+=Relationship)* )?
		('pin' pin+=HardwarePin ( "," pin+=HardwarePin)* )?
		('part' part+=HardwareComponentPrototype ( "," part+=HardwareComponentPrototype)* )?
		('connector' connector+=HardwareConnector ( "," connector+=HardwareConnector)* )?
		('port' port+=HardwarePort ( "," port+=HardwarePort)* )?
//		('portConnector' '{' portConnector+=PortConnector ( "," portConnector+=PortConnector)* '}' )?
	;

PowerHardwarePin returns PowerHardwarePin:
	'PowerHardwarePin'
	'{'
		'shortName' shortName=Identifier
		('category' category=Identifier)?
		('uuid' uuid=String0)?
		('name' name=String0)?
		('direction' direction=EADirectionKind)?
		('isGround' isGround=Boolean)?
		('ownedComment' ownedComment+=Comment ( "," ownedComment+=Comment)* )?
	;

Sensor returns Sensor:
	'Sensor'
		'shortName' shortName=Identifier
		('category' category=Identifier)?
		('uuid' uuid=String0)?
		('name' name=String0)?
		('traceableSpecification' traceableSpecification+=[TraceableSpecification|EString] ( "," traceableSpecification+=[TraceableSpecification|EString])* )?
		('ownedComment' ownedComment+=Comment ( "," ownedComment+=Comment)* )?
		('ownedRelationship' ownedRelationship+=Relationship ( "," ownedRelationship+=Relationship)* )?
		('pin' pin+=HardwarePin ( "," pin+=HardwarePin)* )?
		('part' part+=HardwareComponentPrototype ( "," part+=HardwareComponentPrototype)* )?
		('connector' connector+=HardwareConnector ( "," connector+=HardwareConnector)* )?
		('port' port+=HardwarePort ( "," port+=HardwarePort)* )?
//		('portConnector' '{' portConnector+=PortConnector ( "," portConnector+=PortConnector)* '}' )?
	;

EAPackage returns EAPackage:
	'EAPackage'
		'shortName' shortName=Identifier
		('category' category=Identifier)?
		('uuid' uuid=String0)?
		('name' name=String0)?
		('ownedComment' ownedComment+=Comment ( "," ownedComment+=Comment)* )?
		('subPackage' subPackage+=EAPackage ( "," subPackage+=EAPackage)* )?
//		('element' '{' element+=EAPackageableElement ( "," element+=EAPackageableElement)* '}' )?
	;

Realization returns Realization:
	'Realization'
		'shortName' shortName=Identifier
		('category' category=Identifier)?
		('uuid' uuid=String0)?
		('name' name=String0)?
		('ownedComment' ownedComment+=Comment ( "," ownedComment+=Comment)* )?
		'realized' realized+=Realization_realized ( "," realized+=Realization_realized)* 
		'realizedBy' realizedBy+=Realization_realizedBy ( "," realizedBy+=Realization_realizedBy)* 
	;

ArrayDatatype returns ArrayDatatype:
	'ArrayDatatype'
		'shortName' shortName=Identifier
		('category' category=Identifier)?
		('uuid' uuid=String0)?
		('name' name=String0)?
		('text' text=String0)?
//		('uri' uri=String0)?
		('maxLength' maxLength=Integer)?
		('minLength' minLength=Integer)?
		'elementType' elementType=[EADatatype|EString]
		('ownedComment' ownedComment+=Comment ( "," ownedComment+=Comment)* )?
	;

CompositeDatatype returns CompositeDatatype:
	'CompositeDatatype'
		'shortName' shortName=Identifier
		('category' category=Identifier)?
		('uuid' uuid=String0)?
		('name' name=String0)?
		('text' text=String0)?
//		('uri' uri=String0)?
		('ownedComment'  ownedComment+=Comment ( "," ownedComment+=Comment)* )?
		'datatypePrototype' datatypePrototype+=EADatatypePrototype ( "," datatypePrototype+=EADatatypePrototype)*  
	;

EABoolean returns EABoolean:
	'EABoolean'
		'shortName' shortName=Identifier
		('category' category=Identifier)?
		('uuid' uuid=String0)?
		('name' name=String0)?
		('text' text=String0)?
//		('uri' uri=String0)?
		('ownedComment' ownedComment+=Comment ( "," ownedComment+=Comment)* )?
	;

EADatatypePrototype returns EADatatypePrototype:
	'EADatatypePrototype'
		'shortName' shortName=Identifier
		('category' category=Identifier)?
		('uuid' uuid=String0)?
		('name' name=String0)?
		'type' type=[EADatatype|EString]
		('ownedComment' ownedComment+=Comment ( "," ownedComment+=Comment)* )?
	;

EANumerical returns EANumerical:
	'EANumerical'
		'shortName' shortName=Identifier
		('category' category=Identifier)?
		('uuid' uuid=String0)?
		('name' name=String0)?
		('text' text=String0)?
//		('uri' uri=String0)?
		('max' max=Numerical)?
		('min' min=Numerical)?
		('unit' unit=[Unit|EString])?
		('ownedComment' ownedComment+=Comment ( "," ownedComment+=Comment)* )?
	;

EAString returns EAString:
	'EAString'
		'shortName' shortName=Identifier
		('category' category=Identifier)?
		('uuid' uuid=String0)?
		('name' name=String0)?
		('text' text=String0)?
//		('uri' uri=String0)?
		('ownedComment' ownedComment+=Comment ( "," ownedComment+=Comment)* )?
	;

Enumeration returns Enumeration:
	'Enumeration'
		'shortName' shortName=Identifier
		('category' category=Identifier)?
		('uuid' uuid=String0)?
		('name' name=String0)?
		('text' text=String0)?
//		('uri' uri=String0)?
		'isMultiValued' isMultiValued=Boolean
		('ownedComment' ownedComment+=Comment ( "," ownedComment+=Comment)* )?
		'literal' literal+=EnumerationLiteral ( "," literal+=EnumerationLiteral)* 
	;

EnumerationLiteral returns EnumerationLiteral:
	'EnumerationLiteral'
		'shortName' shortName=Identifier
		('category' category=Identifier)?
		('uuid' uuid=String0)?
		('name' name=String0)?
		('ownedComment' ownedComment+=Comment ( "," ownedComment+=Comment)* )?
	;

Quantity returns Quantity:
	'Quantity'
		'shortName' shortName=Identifier
		('category' category=Identifier)?
		('uuid' uuid=String0)?
		('name' name=String0)?
		'amountOfSubstanceExp' amountOfSubstanceExp=Integer
		'electricCurrentExp' electricCurrentExp=Integer
		'lengthExp' lengthExp=Integer
		'luminousIntensityExp' luminousIntensityExp=Integer
		'massExp' massExp=Integer
		'thermodynamicTemperatureExp' thermodynamicTemperatureExp=Integer
		'timeExp' timeExp=Integer
		('ownedComment' ownedComment+=Comment ( "," ownedComment+=Comment)* )?
	;

RangeableValueType returns RangeableValueType:
	'RangeableValueType'
		'shortName' shortName=Identifier
		('category' category=Identifier)?
		('uuid' uuid=String0)?
		('name' name=String0)?
		('text' text=String0)?
//		('uri' uri=String0)?
		'accuracy' accuracy=Float
		'resolution' resolution=Float
		('significantDigits' significantDigits=Integer)?
		'baseRangeable' baseRangeable=[EANumerical|EString]
		('ownedComment' ownedComment+=Comment ( "," ownedComment+=Comment)* )?
	;

Unit returns Unit:
	'Unit'
		'shortName' shortName=Identifier
		('category' category=Identifier)?
		('uuid' uuid=String0)?
		('name' name=String0)?
		'factor' factor=Float
		'symbol' symbol=String0
		'offset' offset=Float
		('reference' reference=[Unit|EString])?
		('quantity' quantity=[Quantity|EString])?
		('ownedComment' ownedComment+=Comment ( "," ownedComment+=Comment)* )?
	;

Comment_Impl returns Comment:
	'Comment'
		'body' body=String0
	;

Rationale returns Rationale:
	'Rationale'
		'body' body=String0
	;

Boolean returns Boolean:
	'Boolean' /* TODO: implement this rule and an appropriate IValueConverter */;

FunctionAllocation_allocatedElement returns FunctionAllocation_allocatedElement:
	'FunctionAllocation_allocatedElement'
		('allocateableElement_context' allocateableElement_context+=[AllocateableElement|EString] ( "," allocateableElement_context+=[AllocateableElement|EString])* )?
		'allocateableElement' allocateableElement=[AllocateableElement|EString]
	;

FunctionAllocation_target returns FunctionAllocation_target:
	'FunctionAllocation_target'
		('allocationTarget_context' '(' allocationTarget_context+=[AllocationTarget|EString] ( "," allocationTarget_context+=[AllocationTarget|EString])* ')' )?
		'allocationTarget' allocationTarget=[AllocationTarget|EString]
	;

enum ClientServerKind returns ClientServerKind:
				client = 'client' | server = 'server';

FunctionConnector_port returns FunctionConnector_port:
	'FunctionConnector_port'
		('functionPrototype' functionPrototype=[FunctionPrototype|EString])?
		'functionPort' functionPort=[FunctionPort|EString]
	;

enum EADirectionKind returns EADirectionKind:
				in = 'in' | inout = 'inout' | out = 'out';

EAArrayValue returns EAArrayValue:
	'EAArrayValue'
		'type' type=[EADatatype|EString]
		('value' value+=EAValue ( "," value+=EAValue)* )?
	;

EABooleanValue returns EABooleanValue:
	'EABooleanValue'
		'value' value=Boolean
		'type' type=[EADatatype|EString]
	;

EACompositeValue returns EACompositeValue:
	'EACompositeValue'
		'type' type=[EADatatype|EString]
		'value' value+=EAValue ( "," value+=EAValue)* 
	;

EAEnumerationValue returns EAEnumerationValue:
	'EAEnumerationValue'
		'type' type=[EADatatype|EString]
		'value' value+=[EnumerationLiteral|EString] ( "," value+=[EnumerationLiteral|EString])*
	;

EAExpression returns EAExpression:
	'EAExpression'
		'type' type=[EADatatype|EString]
		('value' value+=EAValue ( "," value+=EAValue)* )?
	;

EANumericalValue returns EANumericalValue:
	'EANumericalValue'
		'value' value=Numerical
		'type' type=[EADatatype|EString]
	;

EAStringValue returns EAStringValue:
	'EAStringValue'
		'value' value=String0
		'type' type=[EADatatype|EString]
	;

Numerical returns Numerical:
	'Numerical' /* TODO: implement this rule and an appropriate IValueConverter */;

HardwareConnector_port returns HardwareConnector_port:
	'HardwareConnector_port'
		'hardwarePin' hardwarePin=[HardwarePin|EString]
		('hardwareComponentPrototype' hardwareComponentPrototype=[HardwareComponentPrototype|EString])?
	;

HardwarePortConnector_port returns HardwarePortConnector_port:
	'HardwarePortConnector_port'
		'hardwarePort' hardwarePort=[HardwarePort|EString]
		('hardwareComponentPrototype' hardwareComponentPrototype=[HardwareComponentPrototype|EString])?
	;

enum IOHardwarePinKind returns IOHardwarePinKind:
				digital = 'digital' | analog = 'analog' | pwm = 'pwm' | other = 'other';

enum HardwareBusKind returns HardwareBusKind:
				TimeTriggered = 'TimeTriggered' | EventTriggered = 'EventTriggered' | TimeAndEventTriggered = 'TimeAndEventTriggered' | other = 'other';

Float returns Float:
	'Float' /* TODO: implement this rule and an appropriate IValueConverter */;

Realization_realized returns Realization_realized:
	'Realization_realized'
		'identifiable_target' identifiable_target=[EAElement|EString]
		('identifiable_context' identifiable_context+=[EAElement|EString] ( "," identifiable_context+=[EAElement|EString])* )?
	;

Realization_realizedBy returns Realization_realizedBy:
	'Realization_realizedBy'
		'identifiable_target' identifiable_target=[Identifiable|EString]
		('identifiable_context' identifiable_context+=[Identifiable|EString] ( "," identifiable_context+=[Identifiable|EString])* )?
	;

Integer returns Integer:
	'Integer' /* TODO: implement this rule and an appropriate IValueConverter */;
	
EString returns ecore::EString:
	STRING | ID;
