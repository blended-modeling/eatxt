/**
 * generated by Xtext 2.22.0
 */
package org.bumble.eastadl.simplified.formatting2;

import com.google.inject.Inject;
import java.util.Arrays;
import org.bumble.eastadl.simplified.services.EastAdlSimplifiedGrammarAccess;
import org.eclipse.eatop.eastadl21.Allocation;
import org.eclipse.eatop.eastadl21.BasicSoftwareFunctionType;
import org.eclipse.eatop.eastadl21.Comment;
import org.eclipse.eatop.eastadl21.DesignFunctionPrototype;
import org.eclipse.eatop.eastadl21.FunctionAllocation;
import org.eclipse.eatop.eastadl21.FunctionConnector;
import org.eclipse.eatop.eastadl21.FunctionPort;
import org.eclipse.eatop.eastadl21.PortGroup;
import org.eclipse.eatop.eastadl21.Relationship;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.formatting2.AbstractFormatter2;
import org.eclipse.xtext.formatting2.IFormattableDocument;
import org.eclipse.xtext.resource.XtextResource;
import org.eclipse.xtext.xbase.lib.Extension;

@SuppressWarnings("all")
public class EastAdlSimplifiedFormatter extends AbstractFormatter2 {
  @Inject
  @Extension
  private EastAdlSimplifiedGrammarAccess _eastAdlSimplifiedGrammarAccess;
  
  protected void _format(final Allocation allocation, @Extension final IFormattableDocument document) {
    EList<Comment> _ownedComment = allocation.getOwnedComment();
    for (final Comment comment : _ownedComment) {
      document.<Comment>format(comment);
    }
    EList<FunctionAllocation> _functionAllocation = allocation.getFunctionAllocation();
    for (final FunctionAllocation functionAllocation : _functionAllocation) {
      document.<FunctionAllocation>format(functionAllocation);
    }
  }
  
  protected void _format(final BasicSoftwareFunctionType basicSoftwareFunctionType, @Extension final IFormattableDocument document) {
    EList<Comment> _ownedComment = basicSoftwareFunctionType.getOwnedComment();
    for (final Comment comment : _ownedComment) {
      document.<Comment>format(comment);
    }
    EList<Relationship> _ownedRelationship = basicSoftwareFunctionType.getOwnedRelationship();
    for (final Relationship relationship : _ownedRelationship) {
      document.<Relationship>format(relationship);
    }
    EList<PortGroup> _portGroup = basicSoftwareFunctionType.getPortGroup();
    for (final PortGroup portGroup : _portGroup) {
      document.<PortGroup>format(portGroup);
    }
    EList<FunctionConnector> _connector = basicSoftwareFunctionType.getConnector();
    for (final FunctionConnector functionConnector : _connector) {
      document.<FunctionConnector>format(functionConnector);
    }
    EList<FunctionPort> _port = basicSoftwareFunctionType.getPort();
    for (final FunctionPort functionPort : _port) {
      document.<FunctionPort>format(functionPort);
    }
    EList<DesignFunctionPrototype> _part = basicSoftwareFunctionType.getPart();
    for (final DesignFunctionPrototype designFunctionPrototype : _part) {
      document.<DesignFunctionPrototype>format(designFunctionPrototype);
    }
  }
  
  public void format(final Object basicSoftwareFunctionType, final IFormattableDocument document) {
    if (basicSoftwareFunctionType instanceof BasicSoftwareFunctionType) {
      _format((BasicSoftwareFunctionType)basicSoftwareFunctionType, document);
      return;
    } else if (basicSoftwareFunctionType instanceof Allocation) {
      _format((Allocation)basicSoftwareFunctionType, document);
      return;
    } else if (basicSoftwareFunctionType instanceof XtextResource) {
      _format((XtextResource)basicSoftwareFunctionType, document);
      return;
    } else if (basicSoftwareFunctionType instanceof EObject) {
      _format((EObject)basicSoftwareFunctionType, document);
      return;
    } else if (basicSoftwareFunctionType == null) {
      _format((Void)null, document);
      return;
    } else if (basicSoftwareFunctionType != null) {
      _format(basicSoftwareFunctionType, document);
      return;
    } else {
      throw new IllegalArgumentException("Unhandled parameter types: " +
        Arrays.<Object>asList(basicSoftwareFunctionType, document).toString());
    }
  }
}
