/*
 * generated by Xtext 2.25.0
 */
lexer grammar InternalEastAdlSimplifiedLexer;

@header {
package org.bumble.eastadl.simplified.ide.contentassist.antlr.lexer;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.Lexer;
}

FunctionAllocation_allocatedElement : 'FunctionAllocation_allocatedElement';

FunctionClientServerInterface : 'FunctionClientServerInterface';

FunctionalDesignArchitecture : 'functionalDesignArchitecture';

AllocateableElement_context : 'allocateableElement_context';

ThermodynamicTemperatureExp : 'thermodynamicTemperatureExp';

HardwareComponentPrototype : 'HardwareComponentPrototype';

HardwarePortConnector_port : 'HardwarePortConnector_port';

HardwareComponentPrototype_1 : 'hardwareComponentPrototype';

HardwareDesignArchitecture : 'hardwareDesignArchitecture';

AnalysisFunctionPrototype : 'AnalysisFunctionPrototype';

BasicSoftwareFunctionType : 'BasicSoftwareFunctionType';

FunctionAllocation_target : 'FunctionAllocation_target';

CommunicationHardwarePin : 'CommunicationHardwarePin';

FunctionClientServerPort : 'FunctionClientServerPort';

AllocationTarget_context : 'allocationTarget_context';

DesignFunctionPrototype : 'DesignFunctionPrototype';

UserAttributeDefinition : 'UserAttributeDefinition';

FunctionConnector_port : 'FunctionConnector_port';

HardwareConnector_port : 'HardwareConnector_port';

Realization_realizedBy : 'Realization_realizedBy';

TraceableSpecification : 'traceableSpecification';

HardwareComponentType : 'HardwareComponentType';

HardwarePortConnector : 'HardwarePortConnector';

TimeAndEventTriggered : 'TimeAndEventTriggered';

UserAttributedElement : 'UserAttributedElement';

AnalysisFunctionType : 'AnalysisFunctionType';

HardwareFunctionType : 'HardwareFunctionType';

LogicalPortConnector : 'LogicalPortConnector';

Realization_realized : 'Realization_realized';

AmountOfSubstanceExp : 'amountOfSubstanceExp';

Identifiable_context : 'identifiable_context';

LuminousIntensityExp : 'luminousIntensityExp';

EADatatypePrototype : 'EADatatypePrototype';

ElectricalComponent : 'ElectricalComponent';

AllocateableElement : 'allocateableElement';

Identifiable_target : 'identifiable_target';

DesignFunctionType : 'DesignFunctionType';

EAEnumerationValue : 'EAEnumerationValue';

EnumerationLiteral : 'EnumerationLiteral';

FunctionAllocation : 'FunctionAllocation';

LocalDeviceManager : 'LocalDeviceManager';

RangeableValueType : 'RangeableValueType';

ElectricCurrentExp : 'electricCurrentExp';

CompositeDatatype : 'CompositeDatatype';

FunctionConnector : 'FunctionConnector';

FunctionPowerPort : 'FunctionPowerPort';

HardwareConnector : 'HardwareConnector';

AttributedElement : 'attributedElement';

FunctionPrototype : 'functionPrototype';

HardwareComponent : 'hardwareComponent';

SignificantDigits : 'significantDigits';

EACompositeValue : 'EACompositeValue';

EANumericalValue : 'EANumericalValue';

FunctionFlowPort : 'FunctionFlowPort';

FunctionalDevice : 'FunctionalDevice';

PowerHardwarePin : 'PowerHardwarePin';

AllocatedElement : 'allocatedElement';

AllocationTarget : 'allocationTarget';

UserElementType : 'UserElementType';

EABooleanValue : 'EABooleanValue';

EventTriggered : 'EventTriggered';

ArrayDatatype : 'ArrayDatatype';

EAStringValue : 'EAStringValue';

IOHardwarePin : 'IOHardwarePin';

TimeTriggered : 'TimeTriggered';

BaseRangeable : 'baseRangeable';

ExecutionRate : 'executionRate';

IsMultiValued : 'isMultiValued';

ReferencedPin : 'referencedPin';

EAArrayValue : 'EAArrayValue';

EAExpression : 'EAExpression';

HardwarePort : 'HardwarePort';

DefaultValue : 'defaultValue';

FunctionPort : 'functionPort';

HardwarePort_1 : 'hardwarePort';

IsElementary : 'isElementary';

Synchronized : 'synchronized';

DesignLevel : 'DesignLevel';

EANumerical : 'EANumerical';

Enumeration : 'Enumeration';

Realization : 'Realization';

ElementType : 'elementType';

HardwarePin : 'hardwarePin';

Allocation : 'Allocation';

Instanceof : 'instanceof';

Resolution : 'resolution';

EABoolean : 'EABoolean';

EAPackage : 'EAPackage';

Operation : 'Operation';

PortGroup : 'PortGroup';

Rationale : 'Rationale';

Direction : 'direction';

Extension : 'extension';

LengthExp : 'lengthExp';

MaxLength : 'maxLength';

MinLength : 'minLength';

Reference : 'reference';

Actuator : 'Actuator';

EAString : 'EAString';

Quantity : 'Quantity';

Accuracy : 'accuracy';

BusSpeed : 'busSpeed';

Category : 'category';

IsActive : 'isActive';

IsGround : 'isGround';

IsShield : 'isShield';

Quantity_1 : 'quantity';

ValidFor : 'validFor';

Comment : 'Comment';

Default : 'default';

Digital : 'digital';

Extends : 'extends';

Finally : 'finally';

MassExp : 'massExp';

TimeExp : 'timeExp';

Sensor : 'Sensor';

Analog : 'analog';

Client : 'client';

Factor : 'factor';

Import : 'import';

Offset : 'offset';

Return : 'return';

Server : 'server';

Static : 'static';

Switch : 'switch';

Symbol : 'symbol';

Target : 'target';

Typeof : 'typeof';

UaType : 'uaType';

Catch : 'catch';

False : 'false';

Inout : 'inout';

Other : 'other';

Super : 'super';

Throw : 'throw';

Value : 'value';

While : 'while';

Node : 'Node';

Unit : 'Unit';

Body : 'body';

Case : 'case';

Else : 'else';

Kind : 'kind';

Name : 'name';

Null : 'null';

Port : 'port';

Text : 'text';

True : 'true';

Type : 'type';

Unit_1 : 'unit';

Uuid : 'uuid';

ExclamationMarkEqualsSignEqualsSign : '!==';

FullStopFullStopLessThanSign : '..<';

EqualsSignEqualsSignEqualsSign : '===';

For : 'for';

Key : 'key';

Max : 'max';

Min : 'min';

New : 'new';

Out : 'out';

Pwm : 'pwm';

Try : 'try';

Uri : 'uri';

Val : 'val';

Var : 'var';

ExclamationMarkEqualsSign : '!=';

PercentSignEqualsSign : '%=';

AmpersandAmpersand : '&&';

AsteriskAsterisk : '**';

AsteriskEqualsSign : '*=';

PlusSignPlusSign : '++';

PlusSignEqualsSign : '+=';

HyphenMinusHyphenMinus : '--';

HyphenMinusEqualsSign : '-=';

HyphenMinusGreaterThanSign : '->';

FullStopFullStop : '..';

SolidusEqualsSign : '/=';

ColonColon : '::';

LessThanSignGreaterThanSign : '<>';

EqualsSignEqualsSign : '==';

EqualsSignGreaterThanSign : '=>';

GreaterThanSignEqualsSign : '>=';

QuestionMarkFullStop : '?.';

QuestionMarkColon : '?:';

As : 'as';

Do : 'do';

If : 'if';

In : 'in';

VerticalLineVerticalLine : '||';

ExclamationMark : '!';

NumberSign : '#';

PercentSign : '%';

Ampersand : '&';

LeftParenthesis : '(';

RightParenthesis : ')';

Asterisk : '*';

PlusSign : '+';

Comma : ',';

HyphenMinus : '-';

FullStop : '.';

Solidus : '/';

Colon : ':';

Semicolon : ';';

LessThanSign : '<';

EqualsSign : '=';

GreaterThanSign : '>';

QuestionMark : '?';

LeftSquareBracket : '[';

RightSquareBracket : ']';

LeftCurlyBracket : '{';

VerticalLine : '|';

RightCurlyBracket : '}';

fragment RULE_BEGIN : ;

fragment RULE_END : ;

RULE_EABINARY : '0b' ('0'..'1')*;

RULE_EAOCTAL : '0' '1'..'7' ('0'..'7')*;

RULE_EAHEX : '0x' ('0'..'9'|'a'..'f')*;

RULE_EAEXPONENT : ('0'..'9')+ ('e'|'E') ('+'|'-')? ('0'..'9')+;

RULE_EAUUID : '^'? ('a'..'f'|'A'..'F'|'$'|'_'|'0'..'9') ('a'..'f'|'A'..'F'|'$'|'_'|'0'..'9'|'-')*;

RULE_HEX : ('0x'|'0X') ('0'..'9'|'a'..'f'|'A'..'F'|'_')+ ('#' (('b'|'B') ('i'|'I')|('l'|'L')))?;

RULE_INT : '0'..'9' ('0'..'9'|'_')*;

RULE_DECIMAL : RULE_INT (('e'|'E') ('+'|'-')? RULE_INT)? (('b'|'B') ('i'|'I'|'d'|'D')|('l'|'L'|'d'|'D'|'f'|'F'))?;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'$'|'_') ('a'..'z'|'A'..'Z'|'$'|'_'|'0'..'9')*;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'?|'\'' ('\\' .|~(('\\'|'\'')))* '\''?);

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
