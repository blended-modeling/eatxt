// automatically generated by Xtext
grammar org.bumble.eastadl.simplified.EastAdlSimplified with org.eclipse.xtext.xbase.Xbase
import "http://www.eclipse.org/xtext/xbase/Xbase" as xbase

import "http://east-adl.info/2.2.0" 
import "http://www.eclipse.org/emf/2002/Ecore" as ecore

EAXML returns EAXML:
    {EAXML}
    (topLevelPackage+=EAPackage (  topLevelPackage+=EAPackage)* )?
    ;

Comment returns Comment:
    Comment_Impl | Rationale;

EAPackageableElement returns EAPackageableElement:
    DesignLevel | AnalysisFunctionType_Impl | BasicSoftwareFunctionType | DesignFunctionType_Impl | FunctionalDevice | 
    FunctionClientServerInterface | HardwareFunctionType | LocalDeviceManager | Actuator | ElectricalComponent | 
    HardwareComponentType_Impl | Node | Sensor | ArrayDatatype | CompositeDatatype | EABoolean | EANumerical | EAString | 
    Enumeration | Quantity | RangeableValueType | Unit | UserAttributeDefinition | UserAttributedElement | UserElementType;

TraceableSpecification returns TraceableSpecification:
    FunctionClientServerInterface | ArrayDatatype | CompositeDatatype | EABoolean | EANumerical | EAString | Enumeration | 
    RangeableValueType;

Relationship returns Relationship:
    Realization;

FunctionPort returns FunctionPort:
    FunctionClientServerPort | FunctionFlowPort | FunctionPowerPort;

HardwareComponentType returns HardwareComponentType:
    HardwareComponentType_Impl | Actuator | ElectricalComponent | Node | Sensor;

HardwarePin returns HardwarePin:
    CommunicationHardwarePin | IOHardwarePin | PowerHardwarePin;

PortConnector returns PortConnector:
    HardwarePortConnector | LogicalPortConnector;

EADatatype returns EADatatype:
    ArrayDatatype | CompositeDatatype | EABoolean | EANumerical | EAString | Enumeration | RangeableValueType;

EAValue returns EAValue:
    EAArrayValue | EABooleanValue | EACompositeValue | EAEnumerationValue | EAExpression | EANumericalValue | 
    EAStringValue;

Identifiable returns Identifiable:
    DesignLevel | Allocation | AnalysisFunctionPrototype | AnalysisFunctionType_Impl | BasicSoftwareFunctionType | 
    DesignFunctionPrototype | DesignFunctionType_Impl | FunctionalDevice | FunctionAllocation | 
    FunctionClientServerInterface | FunctionClientServerPort | FunctionConnector | FunctionFlowPort | FunctionPowerPort | 
    HardwareFunctionType | LocalDeviceManager | Operation | PortGroup | Actuator | CommunicationHardwarePin | 
    ElectricalComponent | HardwareComponentPrototype | HardwareComponentType_Impl | HardwareConnector | HardwarePort | 
    HardwarePortConnector | IOHardwarePin | LogicalPortConnector | Node | PowerHardwarePin | Sensor | EAPackage | 
    Realization | ArrayDatatype | CompositeDatatype | EABoolean | EADatatypePrototype | EANumerical | EAString | 
    Enumeration | EnumerationLiteral | Quantity | RangeableValueType | Unit | UserAttributeDefinition | 
    UserAttributedElement | UserElementType;

DesignFunctionType returns DesignFunctionType:
    DesignFunctionType_Impl | BasicSoftwareFunctionType | HardwareFunctionType | LocalDeviceManager;

EAElement returns EAElement:
    DesignLevel | Allocation | AnalysisFunctionPrototype | AnalysisFunctionType_Impl | BasicSoftwareFunctionType | 
    DesignFunctionPrototype | DesignFunctionType_Impl | FunctionalDevice | FunctionAllocation | 
    FunctionClientServerInterface | FunctionClientServerPort | FunctionConnector | FunctionFlowPort | FunctionPowerPort | 
    HardwareFunctionType | LocalDeviceManager | Operation | PortGroup | Actuator | CommunicationHardwarePin | 
    ElectricalComponent | HardwareComponentPrototype | HardwareComponentType_Impl | HardwareConnector | HardwarePort | 
    HardwarePortConnector | IOHardwarePin | LogicalPortConnector | Node | PowerHardwarePin | Sensor | EAPackage | 
    Realization | ArrayDatatype | CompositeDatatype | EABoolean | EADatatypePrototype | EANumerical | EAString | 
    Enumeration | EnumerationLiteral | Quantity | RangeableValueType | Unit | UserAttributeDefinition | 
    UserAttributedElement | UserElementType;

AnalysisFunctionType returns AnalysisFunctionType:
    AnalysisFunctionType_Impl | FunctionalDevice;

AllocateableElement returns AllocateableElement:
    DesignFunctionPrototype | FunctionClientServerPort | FunctionConnector | FunctionFlowPort | FunctionPowerPort;

AllocationTarget returns AllocationTarget:
    CommunicationHardwarePin | HardwareComponentPrototype | HardwarePort | HardwarePortConnector | IOHardwarePin | 
    LogicalPortConnector | PowerHardwarePin;

FunctionPrototype returns FunctionPrototype:
    AnalysisFunctionPrototype | DesignFunctionPrototype;

EAPackage returns EAPackage:
    'EAPackage' shortName=Identifier
    (BEGIN
        ('category' category=Identifier)?
        ('uuid' uuid=UUID)?
        ('name' name=String0)?
        (ownedComment+=Comment (  ownedComment+=Comment)*)?
        (subPackage+=EAPackage (  subPackage+=EAPackage)* )?
        (element+=EAPackageableElement (  element+=EAPackageableElement)* )?
    END)?;

Identifier returns Identifier:
    ID;

String0 returns String:
    ID;
    
Comment_Impl returns Comment:
    'Comment'
    (BEGIN
        'body' body=String0
    END);

Rationale returns Rationale:
    'Rationale'
    (BEGIN
        'body' body=String0
    END);

DesignLevel returns DesignLevel:
    'DesignLevel' shortName=Identifier
    (BEGIN
        ('category' category=Identifier)?
        ('uuid' uuid=UUID)?
        ('name' name=String0)?
        ('traceableSpecification' '(' traceableSpecification+=[TraceableSpecification|EString] (  traceableSpecification+=[TraceableSpecification|EString])* ')' )?
        (ownedComment+=Comment (  ownedComment+=Comment)*)?
        (ownedRelationship+=Relationship (  ownedRelationship+=Relationship)*)?
        (allocation+=Allocation (  allocation+=Allocation)*)?
        ('functionalDesignArchitecture' functionalDesignArchitecture=DesignFunctionPrototype)?
        ('hardwareDesignArchitecture' hardwareDesignArchitecture=HardwareComponentPrototype)?
    END)?;

AnalysisFunctionType_Impl returns AnalysisFunctionType:
    'AnalysisFunctionType' shortName=Identifier
    (BEGIN
        ('category' category=Identifier)?
        ('uuid' uuid=UUID)?
        ('name' name=String0)?
        ('isElementary' isElementary=Boolean)?
        ('traceableSpecification' '(' traceableSpecification+=[TraceableSpecification|EString] (  traceableSpecification+=[TraceableSpecification|EString])* ')' )?
        (ownedComment+=Comment (  ownedComment+=Comment)*)?
        (ownedRelationship+=Relationship (  ownedRelationship+=Relationship)*)?
        (portGroup+=PortGroup (  portGroup+=PortGroup)*)?
        (connector+=FunctionConnector (  connector+=FunctionConnector)*)?
        (port+=FunctionPort (  port+=FunctionPort)*)?
        (part+=AnalysisFunctionPrototype (  part+=AnalysisFunctionPrototype)*)?
    END)?;

BasicSoftwareFunctionType returns BasicSoftwareFunctionType:
    'BasicSoftwareFunctionType' shortName=Identifier
    (BEGIN
        ('category' category=Identifier)?
        ('uuid' uuid=UUID)?
        ('name' name=String0)?
        ('isElementary' isElementary=Boolean)?
        ('traceableSpecification' '(' traceableSpecification+=[TraceableSpecification|EString] (  traceableSpecification+=[TraceableSpecification|EString])* ')' )?
        (ownedComment+=Comment (  ownedComment+=Comment)*)?
        (ownedRelationship+=Relationship (  ownedRelationship+=Relationship)*)?
        (portGroup+=PortGroup (  portGroup+=PortGroup)*)?
        (connector+=FunctionConnector (  connector+=FunctionConnector)*)?
        (port+=FunctionPort (  port+=FunctionPort)*)?
        (part+=DesignFunctionPrototype (  part+=DesignFunctionPrototype)*)?
    END)?;

DesignFunctionType_Impl returns DesignFunctionType:
    'DesignFunctionType' shortName=Identifier
    (BEGIN
        ('category' category=Identifier)?
        ('uuid' uuid=UUID)?
        ('name' name=String0)?
        ('isElementary' isElementary=Boolean)?
        ('traceableSpecification' '(' traceableSpecification+=[TraceableSpecification|EString] (  traceableSpecification+=[TraceableSpecification|EString])* ')' )?
        (ownedComment+=Comment (  ownedComment+=Comment)*)?
        (ownedRelationship+=Relationship (  ownedRelationship+=Relationship)*)?
        (portGroup+=PortGroup (  portGroup+=PortGroup)*)?
        (connector+=FunctionConnector (  connector+=FunctionConnector)*)?
        (port+=FunctionPort (  port+=FunctionPort)*)?
        (part+=DesignFunctionPrototype (  part+=DesignFunctionPrototype)*)?
    END)?;

FunctionalDevice returns FunctionalDevice:
    'FunctionalDevice' shortName=Identifier
    (BEGIN
        ('category' category=Identifier)?
        ('uuid' uuid=UUID)?
        ('name' name=String0)?
        ('isElementary' isElementary=Boolean)?
        ('traceableSpecification' '(' traceableSpecification+=[TraceableSpecification|EString] (  traceableSpecification+=[TraceableSpecification|EString])* ')' )?
        (ownedComment+=Comment (  ownedComment+=Comment)*)?
        (ownedRelationship+=Relationship (  ownedRelationship+=Relationship)*)?
        (portGroup+=PortGroup (  portGroup+=PortGroup)*)?
        (connector+=FunctionConnector (  connector+=FunctionConnector)*)?
        (port+=FunctionPort (  port+=FunctionPort)*)?
        (part+=AnalysisFunctionPrototype (  part+=AnalysisFunctionPrototype)*)?
    END)?;

FunctionClientServerInterface returns FunctionClientServerInterface:
    'FunctionClientServerInterface' shortName=Identifier
    (BEGIN
        ('category' category=Identifier)?
        ('uuid' uuid=UUID)?
        ('name' name=String0)?
        ('text' text=String0)?
        ('uri' uri=String0)?
        (ownedComment+=Comment (  ownedComment+=Comment)*)?
        (operation+=Operation (  operation+=Operation)*)?
    END)?;

HardwareFunctionType returns HardwareFunctionType:
    'HardwareFunctionType' shortName=Identifier
    (BEGIN
        ('category' category=Identifier)?
        ('uuid' uuid=UUID)?
        ('name' name=String0)?
        ('isElementary' isElementary=Boolean)?
        ('traceableSpecification' '(' traceableSpecification+=[TraceableSpecification|EString] (  traceableSpecification+=[TraceableSpecification|EString])* ')' )?
        ('hardwareComponent' hardwareComponent=[HardwareComponentType|EString])?
        (ownedComment+=Comment (  ownedComment+=Comment)*)?
        (ownedRelationship+=Relationship (  ownedRelationship+=Relationship)*)?
        (portGroup+=PortGroup (  portGroup+=PortGroup)*)?
        (connector+=FunctionConnector (  connector+=FunctionConnector)*)?
        (port+=FunctionPort (  port+=FunctionPort)*)?
        (part+=DesignFunctionPrototype (  part+=DesignFunctionPrototype)*)?
    END)?;

LocalDeviceManager returns LocalDeviceManager:
    'LocalDeviceManager' shortName=Identifier
    (BEGIN
        ('category' category=Identifier)?
        ('uuid' uuid=UUID)?
        ('name' name=String0)?
        ('isElementary' isElementary=Boolean)?
        ('traceableSpecification' '(' traceableSpecification+=[TraceableSpecification|EString] (  traceableSpecification+=[TraceableSpecification|EString])* ')' )?
        (ownedComment+=Comment (  ownedComment+=Comment)*)?
        (ownedRelationship+=Relationship (  ownedRelationship+=Relationship)*)?
        (portGroup+=PortGroup (  portGroup+=PortGroup)*)?
        (connector+=FunctionConnector (  connector+=FunctionConnector)*)?
        (port+=FunctionPort (  port+=FunctionPort)*)?
        (part+=DesignFunctionPrototype (  part+=DesignFunctionPrototype)*)?
    END)?;

Actuator returns Actuator:
    'Actuator' shortName=Identifier
    (BEGIN
        ('category' category=Identifier)?
        ('uuid' uuid=UUID)?
        ('name' name=String0)?
        ('traceableSpecification' '(' traceableSpecification+=[TraceableSpecification|EString] (  traceableSpecification+=[TraceableSpecification|EString])* ')' )?
        (ownedComment+=Comment (  ownedComment+=Comment)*)?
        (ownedRelationship+=Relationship (  ownedRelationship+=Relationship)*)?
        (pin+=HardwarePin (  pin+=HardwarePin)*)?
        (part+=HardwareComponentPrototype (  part+=HardwareComponentPrototype)*)?
        (connector+=HardwareConnector (  connector+=HardwareConnector)*)?
        (port+=HardwarePort (  port+=HardwarePort)*)?
        (portConnector+=PortConnector (  portConnector+=PortConnector)*)?
    END)?;

ElectricalComponent returns ElectricalComponent:
    'ElectricalComponent' shortName=Identifier
    (BEGIN
        ('category' category=Identifier)?
        ('uuid' uuid=UUID)?
        ('name' name=String0)?
        ('isActive' isActive=Boolean)?
        ('traceableSpecification' '(' traceableSpecification+=[TraceableSpecification|EString] (  traceableSpecification+=[TraceableSpecification|EString])* ')' )?
        (ownedComment+=Comment (  ownedComment+=Comment)*)?
        (ownedRelationship+=Relationship (  ownedRelationship+=Relationship)*)?
        (pin+=HardwarePin (  pin+=HardwarePin)*)?
        (part+=HardwareComponentPrototype (  part+=HardwareComponentPrototype)*)?
        (connector+=HardwareConnector (  connector+=HardwareConnector)*)?
        (port+=HardwarePort (  port+=HardwarePort)*)?
        (portConnector+=PortConnector (  portConnector+=PortConnector)*)?
    END)?;

HardwareComponentType_Impl returns HardwareComponentType:
    'HardwareComponentType' shortName=Identifier
    (BEGIN
        ('category' category=Identifier)?
        ('uuid' uuid=UUID)?
        ('name' name=String0)?
        ('traceableSpecification' '(' traceableSpecification+=[TraceableSpecification|EString] (  traceableSpecification+=[TraceableSpecification|EString])* ')' )?
        (ownedComment+=Comment (  ownedComment+=Comment)*)?
        (ownedRelationship+=Relationship (  ownedRelationship+=Relationship)*)?
        (pin+=HardwarePin (  pin+=HardwarePin)*)?
        (part+=HardwareComponentPrototype (  part+=HardwareComponentPrototype)*)?
        (connector+=HardwareConnector (  connector+=HardwareConnector)*)?
        (port+=HardwarePort (  port+=HardwarePort)*)?
        (portConnector+=PortConnector (  portConnector+=PortConnector)*)?
    END)?;

Node returns Node:
    'Node' shortName=Identifier
    (BEGIN
        ('category' category=Identifier)?
        ('uuid' uuid=UUID)?
        ('name' name=String0)?
        ('executionRate' executionRate=Float)?
        ('traceableSpecification' '(' traceableSpecification+=[TraceableSpecification|EString] (  traceableSpecification+=[TraceableSpecification|EString])* ')' )?
        (ownedComment+=Comment (  ownedComment+=Comment)*)?
        (ownedRelationship+=Relationship (  ownedRelationship+=Relationship)*)?
        (pin+=HardwarePin (  pin+=HardwarePin)*)?
        (part+=HardwareComponentPrototype (  part+=HardwareComponentPrototype)*)?
        (connector+=HardwareConnector (  connector+=HardwareConnector)*)?
        (port+=HardwarePort (  port+=HardwarePort)*)?
        (portConnector+=PortConnector (  portConnector+=PortConnector)*)?
    END)?;

Sensor returns Sensor:
    'Sensor' shortName=Identifier
    (BEGIN
        ('category' category=Identifier)?
        ('uuid' uuid=UUID)?
        ('name' name=String0)?
        ('traceableSpecification' '(' traceableSpecification+=[TraceableSpecification|EString] (  traceableSpecification+=[TraceableSpecification|EString])* ')' )?
        (ownedComment+=Comment (  ownedComment+=Comment)*)?
        (ownedRelationship+=Relationship (  ownedRelationship+=Relationship)*)?
        (pin+=HardwarePin (  pin+=HardwarePin)*)?
        (part+=HardwareComponentPrototype (  part+=HardwareComponentPrototype)*)?
        (connector+=HardwareConnector (  connector+=HardwareConnector)*)?
        (port+=HardwarePort (  port+=HardwarePort)*)?
        (portConnector+=PortConnector (  portConnector+=PortConnector)*)?
    END)?;

ArrayDatatype returns ArrayDatatype:
    'ArrayDatatype' shortName=Identifier
    (BEGIN
        ('category' category=Identifier)?
        ('uuid' uuid=UUID)?
        ('name' name=String0)?
        ('text' text=String0)?
        ('uri' uri=String0)?
        ('maxLength' maxLength=Integer)?
        ('minLength' minLength=Integer)?
        'elementType' elementType=[EADatatype|EString]
        (ownedComment+=Comment (  ownedComment+=Comment)*)?
    END);

CompositeDatatype returns CompositeDatatype:
    'CompositeDatatype' shortName=Identifier
    (BEGIN
        ('category' category=Identifier)?
        ('uuid' uuid=UUID)?
        ('name' name=String0)?
        ('text' text=String0)?
        ('uri' uri=String0)?
        (ownedComment+=Comment (  ownedComment+=Comment)*)?
        datatypePrototype+=EADatatypePrototype (  datatypePrototype+=EADatatypePrototype)*
    END);

EABoolean returns EABoolean:
    'EABoolean' shortName=Identifier
    (BEGIN
        ('category' category=Identifier)?
        ('uuid' uuid=UUID)?
        ('name' name=String0)?
        ('text' text=String0)?
        ('uri' uri=String0)?
        (ownedComment+=Comment (  ownedComment+=Comment)*)?
    END)?;

EANumerical returns EANumerical:
    'EANumerical' shortName=Identifier
    (BEGIN
        ('category' category=Identifier)?
        ('uuid' uuid=UUID)?
        ('name' name=String0)?
        ('text' text=String0)?
        ('uri' uri=String0)?
        ('max' max=Numerical)?
        ('min' min=Numerical)?
        ('unit' unit=[Unit|EString])?
        (ownedComment+=Comment (  ownedComment+=Comment)*)?
    END)?;

EAString returns EAString:
    'EAString' shortName=Identifier
    (BEGIN
        ('category' category=Identifier)?
        ('uuid' uuid=UUID)?
        ('name' name=String0)?
        ('text' text=String0)?
        ('uri' uri=String0)?
        (ownedComment+=Comment (  ownedComment+=Comment)*)?
    END)?;

Enumeration returns Enumeration:
    'Enumeration' shortName=Identifier
    (BEGIN
        ('category' category=Identifier)?
        ('uuid' uuid=UUID)?
        ('name' name=String0)?
        ('text' text=String0)?
        ('uri' uri=String0)?
        'isMultiValued' isMultiValued=Boolean
        (ownedComment+=Comment (  ownedComment+=Comment)*)?
        literal+=EnumerationLiteral (  literal+=EnumerationLiteral)*
    END);

Quantity returns Quantity:
    'Quantity' shortName=Identifier
    (BEGIN
        ('category' category=Identifier)?
        ('uuid' uuid=UUID)?
        ('name' name=String0)?
        'amountOfSubstanceExp' amountOfSubstanceExp=Integer
        'electricCurrentExp' electricCurrentExp=Integer
        'lengthExp' lengthExp=Integer
        'luminousIntensityExp' luminousIntensityExp=Integer
        'massExp' massExp=Integer
        'thermodynamicTemperatureExp' thermodynamicTemperatureExp=Integer
        'timeExp' timeExp=Integer
        (ownedComment+=Comment (  ownedComment+=Comment)*)?
    END);

RangeableValueType returns RangeableValueType:
    'RangeableValueType' shortName=Identifier
    (BEGIN
        ('category' category=Identifier)?
        ('uuid' uuid=UUID)?
        ('name' name=String0)?
        ('text' text=String0)?
        ('uri' uri=String0)?
        'accuracy' accuracy=Float
        'resolution' resolution=Float
        ('significantDigits' significantDigits=Integer)?
        'baseRangeable' baseRangeable=[EANumerical|EString]
        (ownedComment+=Comment (  ownedComment+=Comment)*)?
    END);

Unit returns Unit:
    'Unit' shortName=Identifier
    (BEGIN
        ('category' category=Identifier)?
        ('uuid' uuid=UUID)?
        ('name' name=String0)?
        'factor' factor=Float
        'symbol' symbol=String0
        'offset' offset=Float
        ('reference' reference=[Unit|EString])?
        ('quantity' quantity=[Quantity|EString])?
        (ownedComment+=Comment (  ownedComment+=Comment)*)?
    END);

UserAttributeDefinition returns UserAttributeDefinition:
    'UserAttributeDefinition' shortName=Identifier
    (BEGIN
        ('category' category=Identifier)?
        ('uuid' uuid=UUID)?
        ('name' name=String0)?
        'type' type=[EADatatype|EString]
        (ownedComment+=Comment (  ownedComment+=Comment)*)?
        ('defaultValue' defaultValue=EAValue)?
    END);

UserAttributedElement returns UserAttributedElement:
    'UserAttributedElement' shortName=Identifier
    (BEGIN
        ('category' category=Identifier)?
        ('uuid' uuid=UUID)?
        ('name' name=String0)?
        ('uaType' '(' uaType+=[UserElementType|EString] (  uaType+=[UserElementType|EString])* ')' )?
        'attributedElement' attributedElement=[Identifiable|EString]
        (ownedComment+=Comment (  ownedComment+=Comment)*)?
        (uaValue+=EAValue (  uaValue+=EAValue)*)?
    END);

UserElementType returns UserElementType:
    'UserElementType' shortName=Identifier
    (BEGIN
        ('category' category=Identifier)?
        ('uuid' uuid=UUID)?
        ('name' name=String0)?
        ('validFor' validFor=String0)?
        'key' key=String0
        (ownedComment+=Comment (  ownedComment+=Comment)*)?
        (uaDefinition+=UserAttributeDefinition (  uaDefinition+=UserAttributeDefinition)*)?
    END);

Allocation returns Allocation:
    'Allocation' shortName=Identifier
    (BEGIN
        ('category' category=Identifier)?
        ('uuid' uuid=UUID)?
        ('name' name=String0)?
        (ownedComment+=Comment (  ownedComment+=Comment)*)?
        (functionAllocation+=FunctionAllocation (  functionAllocation+=FunctionAllocation)*)?
    END)?;

DesignFunctionPrototype returns DesignFunctionPrototype:
    'DesignFunctionPrototype' shortName=Identifier
    (BEGIN
        ('category' category=Identifier)?
        ('uuid' uuid=UUID)?
        ('name' name=String0)?
        'type' type=[DesignFunctionType|EString]
        (ownedComment+=Comment (  ownedComment+=Comment)*)?
    END);

HardwareComponentPrototype returns HardwareComponentPrototype:
    'HardwareComponentPrototype' shortName=Identifier
    (BEGIN
        ('category' category=Identifier)?
        ('uuid' uuid=UUID)?
        ('name' name=String0)?
        'type' type=[HardwareComponentType|EString]
        (ownedComment+=Comment (  ownedComment+=Comment)*)?
    END);

Realization returns Realization:
    'Realization' shortName=Identifier
    (BEGIN
        ('category' category=Identifier)?
        ('uuid' uuid=UUID)?
        ('name' name=String0)?
        (ownedComment+=Comment (  ownedComment+=Comment)*)?
        realized+=Realization_realized (  realized+=Realization_realized)*
        realizedBy+=Realization_realizedBy (  realizedBy+=Realization_realizedBy)*
    END);

Realization_realized returns Realization_realized:
    'Realization_realized'
    (BEGIN
        'identifiable_target' identifiable_target=[EAElement|EString]
        ('identifiable_context' '(' identifiable_context+=[EAElement|EString] ( "," identifiable_context+=[EAElement|EString])* ')' )?
    END);

Realization_realizedBy returns Realization_realizedBy:
    'Realization_realizedBy'
    (BEGIN
        'identifiable_target' identifiable_target=[Identifiable|EString]
        ('identifiable_context' '(' identifiable_context+=[Identifiable|EString] ( "," identifiable_context+=[Identifiable|EString])* ')' )?
    END);

AnalysisFunctionPrototype returns AnalysisFunctionPrototype:
    'AnalysisFunctionPrototype' shortName=Identifier
    (BEGIN
        ('category' category=Identifier)?
        ('uuid' uuid=UUID)?
        ('name' name=String0)?
        'type' type=[AnalysisFunctionType|EString]
        (ownedComment+=Comment (  ownedComment+=Comment)*)?
    END);

FunctionAllocation returns FunctionAllocation:
    'FunctionAllocation' shortName=Identifier
    (BEGIN
        ('category' category=Identifier)?
        ('uuid' uuid=UUID)?
        ('name' name=String0)?
        (ownedComment+=Comment (  ownedComment+=Comment)*)?
        'allocatedElement' allocatedElement=FunctionAllocation_allocatedElement
        'target' target=FunctionAllocation_target
    END);

FunctionClientServerPort returns FunctionClientServerPort:
    'FunctionClientServerPort' shortName=Identifier
    (BEGIN
        ('category' category=Identifier)?
        ('uuid' uuid=UUID)?
        ('name' name=String0)?
        'kind' kind=ClientServerKind
        'type' type=[FunctionClientServerInterface|EString]
        (ownedComment+=Comment (  ownedComment+=Comment)*)?
    END);

FunctionConnector returns FunctionConnector:
    'FunctionConnector' shortName=Identifier
    (BEGIN
        ('category' category=Identifier)?
        ('uuid' uuid=UUID)?
        ('name' name=String0)?
        (ownedComment+=Comment (  ownedComment+=Comment)*)?
        port+=FunctionConnector_port (  port+=FunctionConnector_port)*
    END);

FunctionFlowPort returns FunctionFlowPort:
    'FunctionFlowPort' shortName=Identifier
    (BEGIN
        ('category' category=Identifier)?
        ('uuid' uuid=UUID)?
        ('name' name=String0)?
        'direction' direction=EADirectionKind
        'type' type=[EADatatype|EString]
        (ownedComment+=Comment (  ownedComment+=Comment)*)?
        ('defaultValue' defaultValue=EAValue)?
    END);

FunctionPowerPort returns FunctionPowerPort:
    'FunctionPowerPort' shortName=Identifier
    (BEGIN
        ('category' category=Identifier)?
        ('uuid' uuid=UUID)?
        ('name' name=String0)?
        'type' type=[CompositeDatatype|EString]
        (ownedComment+=Comment (  ownedComment+=Comment)*)?
    END);

Operation returns Operation:
    'Operation' shortName=Identifier
    (BEGIN
        ('category' category=Identifier)?
        ('uuid' uuid=UUID)?
        ('name' name=String0)?
        (ownedComment+=Comment (  ownedComment+=Comment)*)?
        ('return' return=EADatatypePrototype)?
        (argument+=EADatatypePrototype (  argument+=EADatatypePrototype)*)?
    END)?;

PortGroup returns PortGroup:
    'PortGroup' shortName=Identifier
    (BEGIN
        ('category' category=Identifier)?
        ('uuid' uuid=UUID)?
        ('name' name=String0)?
        ('port' '(' port+=[FunctionPort|EString] (  port+=[FunctionPort|EString])* ')' )?
        (ownedComment+=Comment (  ownedComment+=Comment)*)?
        (portGroup+=PortGroup (  portGroup+=PortGroup)*)?
    END)?;

CommunicationHardwarePin returns CommunicationHardwarePin:
    'CommunicationHardwarePin' shortName=Identifier
    (BEGIN
        ('category' category=Identifier)?
        ('uuid' uuid=UUID)? 
        ('name' name=String0)?
        ('direction' direction=EADirectionKind)?
        ('isGround' isGround=Boolean)?
        (ownedComment+=Comment (  ownedComment+=Comment)*)?
    END)?;

HardwareConnector returns HardwareConnector:
    'HardwareConnector' shortName=Identifier
    (BEGIN
        ('category' category=Identifier)?
        ('uuid' uuid=UUID)?
        ('name' name=String0)?
        (ownedComment+=Comment (  ownedComment+=Comment)*)?
        port+=HardwareConnector_port (  port+=HardwareConnector_port)*
    END);

HardwarePort returns HardwarePort:
    'HardwarePort' shortName=Identifier
    (BEGIN
        ('category' category=Identifier)?
        ('uuid' uuid=UUID)?
        ('name' name=String0)?
        ('isShield' isShield=Boolean)?
        ('referencedPin' '(' referencedPin+=[HardwarePin|EString] (  referencedPin+=[HardwarePin|EString])* ')' )?
        (ownedComment+=Comment (  ownedComment+=Comment)*)?
        (containedPin+=HardwarePin (  containedPin+=HardwarePin)*)?
        (containedPort+=HardwarePort (  containedPort+=HardwarePort)*)?
    END)?;

HardwarePortConnector returns HardwarePortConnector:
    'HardwarePortConnector' shortName=Identifier
    (BEGIN
        ('category' category=Identifier)?
        ('uuid' uuid=UUID)?
        ('name' name=String0)?
        (ownedComment+=Comment (  ownedComment+=Comment)*)?
        port+=HardwarePortConnector_port (  port+=HardwarePortConnector_port)*
        (connector+=HardwareConnector (  connector+=HardwareConnector)*)?
    END);

IOHardwarePin returns IOHardwarePin:
    'IOHardwarePin' shortName=Identifier
    (BEGIN
        ('category' category=Identifier)?
        ('uuid' uuid=UUID)?
        ('name' name=String0)?
        ('direction' direction=EADirectionKind)?
        ('isGround' isGround=Boolean)?
        ('kind' kind=IOHardwarePinKind)?
        (ownedComment+=Comment (  ownedComment+=Comment)*)?
    END)?;

LogicalPortConnector returns LogicalPortConnector:
    'LogicalPortConnector' shortName=Identifier
    (BEGIN
        ('category' category=Identifier)?
        ('uuid' uuid=UUID)?
        ('name' name=String0)?
        ('kind' kind=HardwareBusKind)?
        ('busSpeed' busSpeed=Float)?
        (ownedComment+=Comment (  ownedComment+=Comment)*)?
        port+=HardwarePortConnector_port (  port+=HardwarePortConnector_port)*
    END);

PowerHardwarePin returns PowerHardwarePin:
    'PowerHardwarePin' shortName=Identifier
    (BEGIN
        ('category' category=Identifier)?
        ('uuid' uuid=UUID)?
        ('name' name=String0)?
        ('direction' direction=EADirectionKind)?
        ('isGround' isGround=Boolean)?
        (ownedComment+=Comment (  ownedComment+=Comment)*)?
    END)?;

EADatatypePrototype returns EADatatypePrototype:
    'EADatatypePrototype' shortName=Identifier
    (BEGIN
        ('category' category=Identifier)?
        ('uuid' uuid=UUID)?
        ('name' name=String0)?
        'type' type=[EADatatype|EString]
        (ownedComment+=Comment (  ownedComment+=Comment)*)?
    END);

EnumerationLiteral returns EnumerationLiteral:
    'EnumerationLiteral' shortName=Identifier
    (BEGIN
        ('category' category=Identifier)?
        ('uuid' uuid=UUID)?
        ('name' name=String0)?
        (ownedComment+=Comment (  ownedComment+=Comment)*)?
    END)?;

FunctionAllocation_allocatedElement returns FunctionAllocation_allocatedElement:
    'FunctionAllocation_allocatedElement'
    (BEGIN
        ('allocateableElement_context' '(' allocateableElement_context+=[AllocateableElement|EString] ( "," allocateableElement_context+=[AllocateableElement|EString])* ')' )?
        'allocateableElement' allocateableElement=[AllocateableElement|EString]
    END);

FunctionAllocation_target returns FunctionAllocation_target:
    'FunctionAllocation_target'
    (BEGIN
        ('allocationTarget_context' '(' allocationTarget_context+=[AllocationTarget|EString] ( "," allocationTarget_context+=[AllocationTarget|EString])* ')' )?
        'allocationTarget' allocationTarget=[AllocationTarget|EString]
    END);

enum ClientServerKind returns ClientServerKind:
                client = 'client' | server = 'server';

FunctionConnector_port returns FunctionConnector_port:
    'FunctionConnector_port'
    (BEGIN
        ('functionPrototype' functionPrototype=[FunctionPrototype|EString])?
        'functionPort' functionPort=[FunctionPort|EString]
    END);

enum EADirectionKind returns EADirectionKind:
                in = 'in' | inout = 'inout' | out = 'out';

EAArrayValue returns EAArrayValue:
    'EAArrayValue'
    (BEGIN
        'type' type=[EADatatype|EString]
        (value+=EAValue (  value+=EAValue)*)?
    END);

EABooleanValue returns EABooleanValue:
    'EABooleanValue'
    (BEGIN
        'value' value=Boolean
        'type' type=[EADatatype|EString]
    END);

EACompositeValue returns EACompositeValue:
    'EACompositeValue'
    (BEGIN
        'type' type=[EADatatype|EString]
        value+=EAValue (  value+=EAValue)*
    END);

EAEnumerationValue returns EAEnumerationValue:
    'EAEnumerationValue'
    (BEGIN
        'type' type=[EADatatype|EString]
        'value' '(' value+=[EnumerationLiteral|EString] (  value+=[EnumerationLiteral|EString])* ')' 
    END);

EAExpression returns EAExpression:
    'EAExpression'
    (BEGIN
        'type' type=[EADatatype|EString]
        (value+=EAValue (  value+=EAValue)*)?
    END);

EANumericalValue returns EANumericalValue:
    'EANumericalValue'
    (BEGIN
        'value' value=Numerical
        'type' type=[EADatatype|EString]
    END);

EAStringValue returns EAStringValue:
    'EAStringValue'
    (BEGIN
        'value' value=String0
        'type' type=[EADatatype|EString]
    END);

Boolean returns ecore::EBoolean: 
    'true' | 'false';

Numerical returns Numerical:
    EABINARY | EAOCTAL | INT | EAHEX | EAEXPONENT;

HardwareConnector_port returns HardwareConnector_port:
    'HardwareConnector_port'
    (BEGIN
        'hardwarePin' hardwarePin=[HardwarePin|EString]
        ('hardwareComponentPrototype' hardwareComponentPrototype=[HardwareComponentPrototype|EString])?
    END);

HardwarePortConnector_port returns HardwarePortConnector_port:
    'HardwarePortConnector_port'
    (BEGIN
        'hardwarePort' hardwarePort=[HardwarePort|EString]
        ('hardwareComponentPrototype' hardwareComponentPrototype=[HardwareComponentPrototype|EString])?
    END);

enum IOHardwarePinKind returns IOHardwarePinKind:
                digital = 'digital' | analog = 'analog' | pwm = 'pwm' | other = 'other';

enum HardwareBusKind returns HardwareBusKind:
                TimeTriggered = 'TimeTriggered' | EventTriggered = 'EventTriggered' | TimeAndEventTriggered = 'TimeAndEventTriggered' | other = 'other';

Float returns ecore::EDouble:
    INT '.' INT;

Integer returns Integer:
    INT;

UUID returns ecore::EString:
	STRING;

// We modify the concrete syntax of the Xbase block expression and make them indentation-aware
@Override
XBlockExpression returns xbase::XExpression:
    {xbase::XBlockExpression}
    (BEGIN
        (expressions+=XExpressionOrVarDeclaration ';'?)*
    END);
    
// The following synthetic tokens are used for the indentation-aware blocks
terminal BEGIN: 'synthetic:BEGIN';  // increase indentation
terminal END: 'synthetic:END';      // decrease indentation

EString returns ecore::EString:
    STRING | ID;

terminal EABINARY:
    ('0b'('0'..'1')*);

terminal EAOCTAL:
    ('0'('1'..'7')('0'..'7')*);

terminal EAHEX:
    ('0x'('0'..'9'|'a'..'f')*);

terminal EAEXPONENT:
    ('0'..'9')+('e'|'E')('+'|'-')?('0'..'9')+;
