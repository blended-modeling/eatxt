/**
 * generated by Xtext 2.25.0
 */
package org.bumble.eastadl.simplified.formatting2;

import java.util.Arrays;
import java.util.function.Consumer;
import org.eclipse.eatop.eastadl22.EAElement;
import org.eclipse.eatop.eastadl22.EAPackageableElement;
import org.eclipse.eatop.eastadl22.Eastadl22Package;
import org.eclipse.eatop.eastadl22.Identifiable;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.common.types.JvmFormalParameter;
import org.eclipse.xtext.common.types.JvmGenericArrayTypeReference;
import org.eclipse.xtext.common.types.JvmParameterizedTypeReference;
import org.eclipse.xtext.common.types.JvmTypeConstraint;
import org.eclipse.xtext.common.types.JvmTypeParameter;
import org.eclipse.xtext.common.types.JvmWildcardTypeReference;
import org.eclipse.xtext.formatting2.IFormattableDocument;
import org.eclipse.xtext.formatting2.IHiddenRegionFormatter;
import org.eclipse.xtext.resource.XtextResource;
import org.eclipse.xtext.xbase.XAssignment;
import org.eclipse.xtext.xbase.XBasicForLoopExpression;
import org.eclipse.xtext.xbase.XBinaryOperation;
import org.eclipse.xtext.xbase.XBlockExpression;
import org.eclipse.xtext.xbase.XCastedExpression;
import org.eclipse.xtext.xbase.XClosure;
import org.eclipse.xtext.xbase.XCollectionLiteral;
import org.eclipse.xtext.xbase.XConstructorCall;
import org.eclipse.xtext.xbase.XDoWhileExpression;
import org.eclipse.xtext.xbase.XExpression;
import org.eclipse.xtext.xbase.XFeatureCall;
import org.eclipse.xtext.xbase.XForLoopExpression;
import org.eclipse.xtext.xbase.XIfExpression;
import org.eclipse.xtext.xbase.XInstanceOfExpression;
import org.eclipse.xtext.xbase.XMemberFeatureCall;
import org.eclipse.xtext.xbase.XPostfixOperation;
import org.eclipse.xtext.xbase.XReturnExpression;
import org.eclipse.xtext.xbase.XSwitchExpression;
import org.eclipse.xtext.xbase.XSynchronizedExpression;
import org.eclipse.xtext.xbase.XThrowExpression;
import org.eclipse.xtext.xbase.XTryCatchFinallyExpression;
import org.eclipse.xtext.xbase.XTypeLiteral;
import org.eclipse.xtext.xbase.XVariableDeclaration;
import org.eclipse.xtext.xbase.XWhileExpression;
import org.eclipse.xtext.xbase.formatting2.XbaseFormatter;
import org.eclipse.xtext.xbase.lib.Extension;
import org.eclipse.xtext.xbase.lib.Procedures.Procedure1;
import org.eclipse.xtext.xtype.XFunctionTypeRef;
import org.eclipse.xtext.xtype.XImportDeclaration;
import org.eclipse.xtext.xtype.XImportSection;

@SuppressWarnings("all")
public class EastAdlSimplifiedFormatter extends XbaseFormatter {
  @Override
  protected void _format(final XBlockExpression expr, @Extension final IFormattableDocument document) {
    final Procedure1<IHiddenRegionFormatter> _function = (IHiddenRegionFormatter it) -> {
      it.indent();
    };
    document.<XBlockExpression>surround(expr, _function);
    EList<XExpression> _expressions = expr.getExpressions();
    for (final XExpression child : _expressions) {
      {
        final Procedure1<IHiddenRegionFormatter> _function_1 = (IHiddenRegionFormatter it) -> {
          it.newLine();
        };
        document.<XExpression>append(child, _function_1);
        document.<XExpression>format(child);
      }
    }
  }
  
  @Override
  protected void formatBody(final XExpression expr, final boolean forceMultiline, @Extension final IFormattableDocument doc) {
    if ((expr == null)) {
      return;
    }
    if ((expr instanceof XBlockExpression)) {
      final Procedure1<IHiddenRegionFormatter> _function = (IHiddenRegionFormatter it) -> {
        it.newLine();
      };
      doc.<XBlockExpression>prepend(((XBlockExpression)expr), _function);
    } else {
      if ((forceMultiline || this.textRegionExtensions.previousHiddenRegion(expr).isMultiline())) {
        final Procedure1<IHiddenRegionFormatter> _function_1 = (IHiddenRegionFormatter it) -> {
          it.newLine();
        };
        final Procedure1<IHiddenRegionFormatter> _function_2 = (IHiddenRegionFormatter it) -> {
          it.indent();
        };
        doc.<XExpression>surround(doc.<XExpression>prepend(expr, _function_1), _function_2);
      } else {
        final Procedure1<IHiddenRegionFormatter> _function_3 = (IHiddenRegionFormatter it) -> {
          it.oneSpace();
        };
        doc.<XExpression>prepend(expr, _function_3);
      }
    }
    doc.<XExpression>format(expr);
  }
  
  @Override
  protected void formatBodyInline(final XExpression expr, final boolean forceMultiline, @Extension final IFormattableDocument doc) {
    if ((expr == null)) {
      return;
    }
    if ((expr instanceof XBlockExpression)) {
      final Procedure1<IHiddenRegionFormatter> _function = (IHiddenRegionFormatter it) -> {
        it.newLine();
      };
      doc.<XBlockExpression>surround(((XBlockExpression)expr), _function);
    } else {
      if ((forceMultiline || this.textRegionExtensions.previousHiddenRegion(expr).isMultiline())) {
        final Procedure1<IHiddenRegionFormatter> _function_1 = (IHiddenRegionFormatter it) -> {
          it.newLine();
        };
        final Procedure1<IHiddenRegionFormatter> _function_2 = (IHiddenRegionFormatter it) -> {
          it.indent();
        };
        final Procedure1<IHiddenRegionFormatter> _function_3 = (IHiddenRegionFormatter it) -> {
          it.newLine();
        };
        doc.<XExpression>append(doc.<XExpression>surround(doc.<XExpression>prepend(expr, _function_1), _function_2), _function_3);
      } else {
        final Procedure1<IHiddenRegionFormatter> _function_4 = (IHiddenRegionFormatter it) -> {
          it.oneSpace();
        };
        doc.<XExpression>surround(expr, _function_4);
      }
    }
    doc.<XExpression>format(expr);
  }
  
  @Override
  protected void formatBodyParagraph(final XExpression expr, @Extension final IFormattableDocument doc) {
    if ((expr == null)) {
      return;
    }
    if ((expr instanceof XBlockExpression)) {
      final Procedure1<IHiddenRegionFormatter> _function = (IHiddenRegionFormatter it) -> {
        it.newLine();
      };
      doc.<XBlockExpression>surround(((XBlockExpression)expr), _function);
    } else {
      final Procedure1<IHiddenRegionFormatter> _function_1 = (IHiddenRegionFormatter it) -> {
        it.oneSpace();
      };
      doc.<XExpression>surround(expr, _function_1);
    }
    doc.<XExpression>format(expr);
  }
  
  protected void _format(final EAElement obj, @Extension final IFormattableDocument doc) {
    if ((obj == null)) {
      return;
    }
    final Procedure1<IHiddenRegionFormatter> _function = (IHiddenRegionFormatter it) -> {
      it.newLine();
    };
    doc.<EAElement>append(obj, _function);
    final Procedure1<IHiddenRegionFormatter> _function_1 = (IHiddenRegionFormatter it) -> {
      it.indent();
    };
    final Procedure1<IHiddenRegionFormatter> _function_2 = (IHiddenRegionFormatter it) -> {
      it.newLine();
    };
    doc.append(doc.surround(this.textRegionExtensions.regionFor(obj).feature(Eastadl22Package.eINSTANCE.getEAElement_Name()), _function_1), _function_2);
    if ((obj instanceof Identifiable)) {
      final Procedure1<IHiddenRegionFormatter> _function_3 = (IHiddenRegionFormatter it) -> {
        it.indent();
      };
      final Procedure1<IHiddenRegionFormatter> _function_4 = (IHiddenRegionFormatter it) -> {
        it.newLine();
      };
      doc.append(doc.surround(this.textRegionExtensions.regionFor(obj).feature(Eastadl22Package.eINSTANCE.getIdentifiable_Category()), _function_3), _function_4);
      final Procedure1<IHiddenRegionFormatter> _function_5 = (IHiddenRegionFormatter it) -> {
        it.indent();
      };
      final Procedure1<IHiddenRegionFormatter> _function_6 = (IHiddenRegionFormatter it) -> {
        it.newLine();
      };
      doc.append(doc.surround(this.textRegionExtensions.regionFor(obj).feature(Eastadl22Package.eINSTANCE.getIdentifiable_Uuid()), _function_5), _function_6);
    }
    final Consumer<EObject> _function_7 = (EObject it) -> {
      doc.<EObject>format(it);
    };
    obj.eContents().forEach(_function_7);
  }
  
  protected void _format(final EAPackageableElement obj, @Extension final IFormattableDocument doc) {
    if ((obj == null)) {
      return;
    }
    final Procedure1<IHiddenRegionFormatter> _function = (IHiddenRegionFormatter it) -> {
      it.indent();
    };
    final Procedure1<IHiddenRegionFormatter> _function_1 = (IHiddenRegionFormatter it) -> {
      it.newLine();
    };
    doc.<EAPackageableElement>prepend(doc.<EAPackageableElement>surround(obj, _function), _function_1);
    final Consumer<EObject> _function_2 = (EObject it) -> {
      doc.<EObject>format(it);
    };
    obj.eContents().forEach(_function_2);
  }
  
  @Override
  public void format(final Object obj, final IFormattableDocument doc) {
    if (obj instanceof EAPackageableElement) {
      _format((EAPackageableElement)obj, doc);
      return;
    } else if (obj instanceof EAElement) {
      _format((EAElement)obj, doc);
      return;
    } else if (obj instanceof JvmTypeParameter) {
      _format((JvmTypeParameter)obj, doc);
      return;
    } else if (obj instanceof JvmFormalParameter) {
      _format((JvmFormalParameter)obj, doc);
      return;
    } else if (obj instanceof XtextResource) {
      _format((XtextResource)obj, doc);
      return;
    } else if (obj instanceof XAssignment) {
      _format((XAssignment)obj, doc);
      return;
    } else if (obj instanceof XBinaryOperation) {
      _format((XBinaryOperation)obj, doc);
      return;
    } else if (obj instanceof XDoWhileExpression) {
      _format((XDoWhileExpression)obj, doc);
      return;
    } else if (obj instanceof XFeatureCall) {
      _format((XFeatureCall)obj, doc);
      return;
    } else if (obj instanceof XMemberFeatureCall) {
      _format((XMemberFeatureCall)obj, doc);
      return;
    } else if (obj instanceof XPostfixOperation) {
      _format((XPostfixOperation)obj, doc);
      return;
    } else if (obj instanceof XWhileExpression) {
      _format((XWhileExpression)obj, doc);
      return;
    } else if (obj instanceof XFunctionTypeRef) {
      _format((XFunctionTypeRef)obj, doc);
      return;
    } else if (obj instanceof JvmGenericArrayTypeReference) {
      _format((JvmGenericArrayTypeReference)obj, doc);
      return;
    } else if (obj instanceof JvmParameterizedTypeReference) {
      _format((JvmParameterizedTypeReference)obj, doc);
      return;
    } else if (obj instanceof JvmWildcardTypeReference) {
      _format((JvmWildcardTypeReference)obj, doc);
      return;
    } else if (obj instanceof XBasicForLoopExpression) {
      _format((XBasicForLoopExpression)obj, doc);
      return;
    } else if (obj instanceof XBlockExpression) {
      _format((XBlockExpression)obj, doc);
      return;
    } else if (obj instanceof XCastedExpression) {
      _format((XCastedExpression)obj, doc);
      return;
    } else if (obj instanceof XClosure) {
      _format((XClosure)obj, doc);
      return;
    } else if (obj instanceof XCollectionLiteral) {
      _format((XCollectionLiteral)obj, doc);
      return;
    } else if (obj instanceof XConstructorCall) {
      _format((XConstructorCall)obj, doc);
      return;
    } else if (obj instanceof XForLoopExpression) {
      _format((XForLoopExpression)obj, doc);
      return;
    } else if (obj instanceof XIfExpression) {
      _format((XIfExpression)obj, doc);
      return;
    } else if (obj instanceof XInstanceOfExpression) {
      _format((XInstanceOfExpression)obj, doc);
      return;
    } else if (obj instanceof XReturnExpression) {
      _format((XReturnExpression)obj, doc);
      return;
    } else if (obj instanceof XSwitchExpression) {
      _format((XSwitchExpression)obj, doc);
      return;
    } else if (obj instanceof XSynchronizedExpression) {
      _format((XSynchronizedExpression)obj, doc);
      return;
    } else if (obj instanceof XThrowExpression) {
      _format((XThrowExpression)obj, doc);
      return;
    } else if (obj instanceof XTryCatchFinallyExpression) {
      _format((XTryCatchFinallyExpression)obj, doc);
      return;
    } else if (obj instanceof XTypeLiteral) {
      _format((XTypeLiteral)obj, doc);
      return;
    } else if (obj instanceof XVariableDeclaration) {
      _format((XVariableDeclaration)obj, doc);
      return;
    } else if (obj instanceof JvmTypeConstraint) {
      _format((JvmTypeConstraint)obj, doc);
      return;
    } else if (obj instanceof XExpression) {
      _format((XExpression)obj, doc);
      return;
    } else if (obj instanceof XImportDeclaration) {
      _format((XImportDeclaration)obj, doc);
      return;
    } else if (obj instanceof XImportSection) {
      _format((XImportSection)obj, doc);
      return;
    } else if (obj instanceof EObject) {
      _format((EObject)obj, doc);
      return;
    } else if (obj == null) {
      _format((Void)null, doc);
      return;
    } else if (obj != null) {
      _format(obj, doc);
      return;
    } else {
      throw new IllegalArgumentException("Unhandled parameter types: " +
        Arrays.<Object>asList(obj, doc).toString());
    }
  }
}
