module org.bumble.eatxt.GenerateEatxt

import org.eclipse.xtext.xtext.generator.*
import org.eclipse.xtext.xtext.generator.model.project.*

var rootPath = ".."
var testPath = "${rootPath}/../tests/org.bumble.eatxt.tests"
var idePath = "${rootPath}/org.bumble.eatxt.ide"

Workflow {
	
	bean = EatxtMWE2MetaModelRegistrar {}
	
	component = XtextGenerator {
		configuration = {
			project = StandardProjectConfig {
				baseName = "org.bumble.eatxt"
				rootPath = rootPath
				runtimeTest = {
					enabled = true
					root = testPath
				}
				eclipsePlugin = {
					enabled = true
				}
				eclipsePluginTest = {
					enabled = true
					root = testPath
				}
				genericIde = {
					enabled = true
					root = idePath
				}
				createEclipseMetaData = true
			}
			code = {
				encoding = "UTF-8"
				lineDelimiter = "\n"
				fileHeader = "/*\n * generated by Xtext \${version}\n */"
				preferXtendStubs = false
			}
		}
		language = XtextGeneratorLanguage {
			name = "org.bumble.eatxt.Eatxt"
			fileExtensions = "eatxt"
			referencedResource = "platform:/resource/org.eclipse.eatop.eastadl22/model/eastadl22.genmodel"
			
		    fragment = grammarAccess.GrammarAccessFragment2 {}
		    fragment = ecore.EMFGeneratorFragment2 {}
		    fragment = serializer.SerializerFragment2 {
		    	generateStub = false
		    }
		    fragment = resourceFactory.ResourceFactoryFragment2 {}
		    fragment = parser.antlr.XtextAntlrGeneratorFragment2 {
		    	options = {
					classSplitting = true
				}
		    }
		    fragment = validation.ValidatorFragment2 {
		    	// composedCheck = "org.eclipse.xtext.validation.NamesAreUniqueValidator"
				// Generates checks for @Deprecated grammar annotations, an IssueProvider and a corresponding PropertyPage
				generateDeprecationValidation = true
		    }
		    fragment = scoping.ImportNamespacesScopingFragment2 {}
		    fragment = exporting.QualifiedNamesFragment2 {}
		    fragment = builder.BuilderIntegrationFragment2 {}
		    fragment = generator.GeneratorFragment2 {
		    	generateXtendStub = true
		    }
			
			fragment = formatting2.EatxtFormatter2Fragment auto-inject {
				generateStub = true
				generateXtendStub = true
			}
			
			fragment = ui.labeling.LabelProviderFragment2 {}
		    fragment = ui.outline.QuickOutlineFragment2 {}
		    fragment = ui.outline.OutlineTreeProviderFragment2 {}
		    fragment = ui.quickfix.QuickfixProviderFragment2 {}
		    
		    fragment = contentassist.EatxtContentAssistFragment auto-inject {
				generateXtendStub = false
				inheritImplementation = true
			}
			
			fragment = ecore2xtext.Ecore2XtextValueConverterServiceFragment2 auto-inject {}
			
		    fragment = junit.JUnitFragment {
		    	junitVersion = "5"
		    }
		    fragment = ui.refactoring.RefactorElementNameFragment2 {}
		    fragment = types.TypesGeneratorFragment2 {}
		    fragment = xbase.XtypeGeneratorFragment2 {}
		    fragment = xbase.XbaseGeneratorFragment2 {}
		    fragment = ui.templates.CodetemplatesGeneratorFragment2 {}
		    fragment = ui.compare.CompareFragment2 {}
        	fragment = ui.projectWizard.TemplateProjectWizardFragment {}
    		fragment = ui.fileWizard.TemplateFileWizardFragment {
    			generate = true
    		}
    		fragment = templates.EatxtTemplateFragment {}
    		
		}
	}
}
